{"version":3,"file":"f94abf1167a74e6b8147a2c6296347e5d5644b83-68202610e7b233eab2a3.js","mappings":";wQAWIA,EAAc,mDACdC,EAAc,0CACdC,EAAc,gCACdC,EAAe,4BACfC,EAAWC,KAAKC,GAAK,IACrBC,EAAW,IAAMF,KAAKC,GACtBE,EAAOH,KAAKI,IACZC,EAAOL,KAAKM,IACZC,EAAOP,KAAKQ,IACZC,EAAQT,KAAKU,KACbC,EAASX,KAAKY,MACdC,EAAY,IACZC,EAAY,SAAmBC,GACjC,MAAwB,iBAAVA,CAChB,EACIC,EAAY,SAAmBD,GACjC,MAAwB,iBAAVA,CAChB,EAIIE,EAAQ,CAAC,EACTC,EAAS,CAAC,EACVC,EAAe,IACfC,EAAgB,SAAuBC,GACzC,OAAOrB,KAAKsB,OAAOD,EAAWR,GAAa,EAAIM,GAAgBA,IAAiBE,EAAW,EAAI,EAAI,EACrG,EAEAE,EAAS,SAAgBR,GACvB,OAAOf,KAAKsB,MAAMP,EAAQI,GAAgBA,GAAgB,CAC5D,EACIK,EAAgB,SAAuBT,GACzC,OAAOf,KAAKsB,MAAc,KAARP,GAAgB,MAAQ,CAC5C,EACIU,EAAgB,SAAuBC,EAASC,EAAUC,EAAGC,GAC/D,IAAIC,EAAUJ,EAAQC,GAClBI,EAAc,IAANF,EAAU,EAAIG,EAAiBF,EAASF,EAAGC,GAEvD,GAAIE,GAASA,EAAQH,EAAI,EAAIE,EAAQG,OAGnC,OAFAP,EAAQQ,OAAOP,EAAU,EAAGG,EAAQK,MAAM,EAAGP,EAAIG,EAAQ,IACzDD,EAAQI,OAAO,EAAGN,EAAIG,GACf,CAEX,EACIK,EAAkB,SAAyBC,EAASJ,EAAQZ,GAE9D,IAAIiB,EAAID,EAAQJ,OACZL,KAAOP,EAAWiB,GAEtB,GAAID,EAAQT,GAAKK,EAAQ,CACvB,OAASL,GAAKS,EAAQT,GAAKK,IAE3BL,EAAI,IAAMA,EAAI,EAChB,MACE,KAAOS,IAAUT,GAAKK,GAAUL,EAAIU,IAGtC,OAAOV,EAAIU,EAAIV,EAAIU,EAAI,CACzB,EASIC,EAAgB,SAAuBC,EAAQC,GAcjD,OAbAA,EAAKC,YAAcF,EAAOE,YAEtBF,EAAOH,SAETI,EAAKJ,QAAUG,EAAOH,QAAQF,MAAM,GACpCM,EAAKE,OAASH,EAAOG,OAAOR,MAAM,GAClCM,EAAKG,UAAYJ,EAAOI,UACxBH,EAAKI,WAAaL,EAAOK,YAChBL,EAAOM,cAEhBL,EAAKK,YAAcN,EAAOM,aAGrBL,CACT,EAEAM,EAAiB,SAAwBrB,EAASI,GAChD,IAAIkB,EAAQtB,EAAQO,OAChBgB,EAAUvB,EAAQsB,EAAQ,IAAM,GAChCV,EAAIW,EAAQhB,OAEZe,GAASlB,EAAQ,KAAOmB,EAAQX,EAAI,IAAMR,EAAQ,KAAOmB,EAAQX,EAAI,KACvER,EAAUmB,EAAQC,OAAOpB,EAAQK,MAAM,IACvCa,KAGFtB,EAAQsB,GAASlB,CACnB,EAWO,SAASqB,EAAWpC,GAEzB,IACIW,EADA0B,GADJrC,EAAQD,EAAUC,IAAUjB,EAAauD,KAAKtC,IAASuC,SAASC,cAAcxC,IAAkBA,GAClFyC,aAAezC,EAAQ,EAGrC,OAAIqC,IAAMrC,EAAQA,EAAMyC,aAAa,OAE9BJ,EAAEK,UACLL,EAAEK,QAAU,CAAC,IAGf/B,EAAU0B,EAAEK,QAAQ1C,MACDW,EAAQgC,OAAShC,EAAU0B,EAAEK,QAAQ1C,GAAS4C,EAAgB5C,IAG3EA,EAAgFD,EAAUC,GAAS4C,EAAgB5C,GAASC,EAAUD,EAAM,IAAM,CAACA,GAASA,EAApJ6C,QAAQC,KAAK,wDAC/B,CAYO,SAASC,EAAehC,GAC7B,IACIiC,EADAnC,EAAI,EAIR,IAFAE,EAAQkC,UAEDpC,EAAIE,EAAQG,OAAQL,GAAK,EAC9BmC,EAAIjC,EAAQF,GACZE,EAAQF,GAAKE,EAAQF,EAAI,GACzBE,EAAQF,EAAI,GAAKmC,EAGnBjC,EAAQmC,UAAYnC,EAAQmC,QAC9B,CAEA,IAiBIC,EAAa,CACfC,KAAM,yBACNC,OAAQ,UACRC,QAAS,cACTC,KAAM,eAeD,SAAS,EAAcC,EAASC,GACrC,IAEIC,EACAC,EACAX,EACAY,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAvBAC,EAAOvB,EAAQwB,QAAQC,cACvBC,EAAO,cAwBX,MAAa,SAATH,GAAoBvB,EAAQ2B,SAIhCrB,EAlEgB,SAAqBzB,EAAG+C,GACxC,IAGIC,EAHAvB,EAAOvB,SAAS+C,gBAAgB,6BAA8B,QAC9DR,EAAO,GAAG1D,MAAMmE,KAAKlD,EAAEmD,YACvB3E,EAAIiE,EAAK5D,OAIb,IAFAkE,EAAS,IAAMA,EAAS,MAEfvE,GAAK,GACZwE,EAAOP,EAAKjE,GAAG4E,SAASR,cAEpBG,EAAOM,QAAQ,IAAML,EAAO,KAAO,GACrCvB,EAAK6B,eAAe,KAAMN,EAAMP,EAAKjE,GAAG+E,WAI5C,OAAO9B,CACT,CAkDS+B,CAAYrC,EAAS,qDAC5BsB,EA5Ce,SAAoBzC,EAAGyD,GAKtC,IAJA,IAAIC,EAAQD,EAAQA,EAAME,MAAM,KAAO,GACnCC,EAAM,CAAC,EACPpF,EAAIkF,EAAM7E,SAELL,GAAK,GACZoF,EAAIF,EAAMlF,KAAOwB,EAAEI,aAAasD,EAAMlF,KAAO,EAG/C,OAAOoF,CACT,CAkCSC,CAAW1C,EAASL,EAAW4B,IAEzB,SAATA,GACFnB,EAAIkB,EAAKqB,GACTtC,EAAKiB,EAAKjB,IAAMD,EAChBD,EAAImB,EAAKnB,EACTX,EAAI8B,EAAK9B,EACTkB,EAAIY,EAAKsB,MAAY,EAAJxC,EACjBO,EAAIW,EAAKuB,OAAc,EAALxC,EAchBH,EAZEE,GAAKC,EAYA,KANPW,GAFAF,GADAD,EAAKV,EAAIC,GACCM,GAEAN,GAMQ,KAJlBc,EAAK1B,EAAIa,GAIoB,MAH7Bc,EAAKD,EAAKP,GAG+B,KAAO,CAACK,EAFjDI,EAAKD,EAAKd,EAAKqB,EALfX,EAAKD,EAAKV,EAAIsB,EAMdL,EAAKF,EAAKd,EACuDS,EAAIO,EAAIP,GAAMA,EAAKD,GAAM,EAAGQ,EAAIR,GAAMC,EAAKD,GAAM,EAAGQ,EAAIR,EAAIQ,EAV7HT,EAAKT,EAAIC,GAAK,EAAIsB,GAUmHL,EAAIlB,EAAGiB,EAAIjB,EAAGgB,EAAIhB,EAAGgB,GAAMA,EAAKD,GAAM,EAAGf,EAAGe,GAAMC,EAAKD,GAAM,EAAGf,EAAGe,EAAIf,EAL5Mc,EAAKzB,EAAIa,GAAM,EAAIqB,GAKgMd,EAAIpB,EAAGqB,EAAIrB,EAAGqB,GAAMC,EAAKD,GAAM,EAAGrB,EAAGsB,GAAMA,EAAKD,GAAM,EAAGrB,EAAGsB,EAAItB,EAAGuB,EAAIvB,EAAGwB,EAAIC,EAAID,EAAIE,GAAI4B,KAAK,KAAO,IAElT,KAAO3C,EAAIO,GAAK,IAAMlB,EAAI,KAAOmB,EAAI,MAAQD,EAAI,MAAQC,EAAI,KAAOD,EAAI,KAE/D,WAATa,GAA8B,YAATA,GACjB,WAATA,EAEFf,GADAJ,EAAIC,EAAKiB,EAAKlB,GACDsB,GAEbtB,EAAIkB,EAAKqB,GAETnC,GADAH,EAAKiB,EAAKjB,IACIqB,GAMhBxB,EAAO,MAHPC,EAAImB,EAAKyB,IAGS3C,GAAK,KAFvBZ,EAAI8B,EAAK0B,IAEwB,KAAO,CAAC7C,EAAIC,EAAGZ,EAAIgB,EAAQL,GAD5DI,EAAQH,EAAIsB,GAC2DlC,EAAIa,EAAIF,EAAGX,EAAIa,EAAIF,EAAII,EAAOf,EAAIa,EAAIF,EAAIC,EAAGZ,EAAIgB,EAAQL,EAAIC,EAAGZ,EAAGW,EAAIC,EAAGZ,EAAIgB,EAAQL,EAAII,EAAOf,EAAIa,EAAIF,EAAGX,EAAIa,EAAIF,EAAII,EAAOf,EAAIa,EAAIF,EAAIC,EAAGZ,EAAIgB,EAAQL,EAAIC,EAAGZ,GAAGsD,KAAK,KAAO,KACrO,SAATvB,EACTrB,EAAO,IAAMoB,EAAK2B,GAAK,IAAM3B,EAAK4B,GAAK,KAAO5B,EAAKV,GAAK,IAAMU,EAAKL,GACjD,aAATM,GAAgC,YAATA,IAIhCrB,EAAO,KAFPC,GADAM,GAAUT,EAAQf,aAAa,UAAY,IAAIkE,MAAM9H,IAAgB,IAC1DmC,SAEM,KADjBgC,EAAIiB,EAAOjD,SACgB,KAAOiD,EAAOqC,KAAK,KAEjC,YAATvB,IACFrB,GAAQ,IAAMC,EAAI,IAAMX,EAAI,MAIhCc,EAAK8C,aAAa,IAAKC,EAAgB/C,EAAKgD,WAAalE,EAAgBc,KAErED,GAAQD,EAAQuD,aAClBvD,EAAQuD,WAAWC,aAAalD,EAAMN,GACtCA,EAAQuD,WAAWE,YAAYzD,IAG1BM,GAhEEN,CAiEX,CAOA,SAAS0D,EAAqBnG,EAASF,EAAGC,GACxC,IAGI6C,EAHAwD,EAAIpG,EAAQF,GACZuG,EAAIrG,EAAQF,EAAI,GAChBwG,EAAItG,EAAQF,EAAI,GAYpB,OAVAsG,IAAMC,EAAID,GAAKrG,EAEfqG,KADAC,IAAMC,EAAID,GAAKtG,GACLqG,GAAKrG,EACf6C,EAAIyD,GAAKC,GAAKtG,EAAQF,EAAI,GAAKwG,GAAKvG,EAAIsG,GAAKtG,EAAIqG,EACjDA,EAAIpG,EAAQF,EAAI,GAGhBsG,KAFAC,EAAIrG,EAAQF,EAAI,IAENsG,GAAKrG,EAEfqG,KADAC,KAFAC,EAAItG,EAAQF,EAAI,IAENuG,GAAKtG,GACLqG,GAAKrG,EACRN,EAAOZ,EAAOwH,GAAKC,GAAKtG,EAAQF,EAAI,GAAKwG,GAAKvG,EAAIsG,GAAKtG,EAAIqG,EAAGxD,GAAKxE,EAC5E,CAEO,SAASmI,EAAa3G,EAAS4G,EAAOC,GAC3CA,OA3RwB,IA2RLA,EAAO,EAAI/G,EAAc+G,IAAQ,EAEpDD,EAAQ9G,EAAc8G,IAAU,EAChC,IAAIE,EAAQxI,KAAKyI,IAAI,KAAMlI,EAAKgI,EAAMD,GAAS,OAC3CzD,EAtLC,SAAqBnD,GAI1B,IAHA,IAAIwG,EAAI,GACJtG,EAAI,EAEDA,EAAIF,EAAQO,OAAQL,IACzBsG,EAAEtG,GAAKW,EAAcb,EAAQE,GAAIF,EAAQE,GAAGO,MAAM,IAGpD,OAAOI,EAAcb,EAASwG,EAChC,CA6KaQ,CAAYhH,GAWvB,GATI4G,EAAQC,IACVD,EAAQ,EAAIA,EACZC,EAAM,EAAIA,EA3PQ,SAAyB7G,EAASiH,GACtD,IAAI/G,EAAIF,EAAQO,OAGhB,IAFA0G,GAAajH,EAAQsC,UAEdpC,KACLF,EAAQE,GAAGqC,UAAYH,EAAepC,EAAQE,GAElD,CAsPIgH,CAAgB/D,GAEhBA,EAAKnC,YAAc,GAGjB4F,EAAQ,GAAKC,EAAM,EAAG,CACxB,IAAIM,EAAS7I,KAAKQ,MAAMR,KAAK8I,IAAIR,EAAOC,IAAQ,EAChDD,GAASO,EACTN,GAAOM,CACT,CAEAhE,EAAKnC,aAAeqG,EAAyBlE,GAC7C,IAWImE,EACAC,EACAC,EACAtH,EACAa,EACA0G,EACA7G,EACA8G,EAlBAC,EAAOd,EAAM,EACbe,EAAIC,EAAgB1E,EAAMyD,EAAOrH,GAAO,GACxCmC,EAAImG,EAAgB1E,EAAM0D,EAAKrH,GAC/BsI,EAAOpG,EAAEtB,QACT2H,EAAOH,EAAExH,QACT4H,EAAYtG,EAAEzB,SACdgI,EAAYL,EAAE3H,SACdiI,EAAKxG,EAAExB,EACPiI,EAAKP,EAAE1H,EACPkI,EAAcH,IAAcD,EAC5BK,EAAaH,IAAOC,GAAMC,EAU9B,GAAIT,GAAQb,EAAO,CAoCjB,IAnCAQ,EAAcU,EAAYC,GAAaG,GAAeF,EAAKC,GAAME,GAAc3G,EAAEvB,EAAIyH,EAAEzH,EAEnFJ,EAAcoD,EAAM8E,EAAWE,EAAIP,EAAEzH,KACvC8H,IAEKX,IACHU,IAEIK,GACF3G,EAAEvB,GAAKuB,EAAEvB,EAAIyH,EAAEzH,IAAM,EAAIyH,EAAEzH,GAC3B+H,EAAK,GACIE,IACTF,GAAMC,KAKR7J,KAAKQ,IAAI,GAAK+H,EAAMD,IAAU,KAChCoB,EAAYC,EAAY,GACdvG,EAAEvB,GAAK6H,EACjBA,IACSjI,EAAcoD,EAAM6E,EAAWE,EAAIxG,EAAEvB,IAAMmH,GACpDW,IAGU,IAARL,EAAEzH,IACJ8H,GAAaA,EAAY,GAAK9E,EAAK5C,QAGrCQ,EAAO,GAEPH,EAAI,GADJ6G,EAAgBtE,EAAK5C,QACGuG,EACxBY,EAAIO,EACJrH,IAAM6G,EAAgBQ,EAAYD,GAAaP,EAE1CvH,EAAI,EAAGA,EAAIU,EAAGV,IACjBmB,EAAeN,EAAMoC,EAAKuE,IAAMD,IAGlCtE,EAAOpC,CACT,MAGE,GAFAyG,EAAiB,IAAR9F,EAAEvB,EAAU,EAAIG,EAAiBwH,EAAMI,EAAIxG,EAAEvB,GAElDyG,IAAUC,EAOZ,IANAU,EAASjH,EAAiByH,EAAMI,EAAIE,EAAaT,EAAEzH,EAAIuB,EAAEvB,EAAIyH,EAAEzH,GAC/DiI,IAAgBZ,GAAUD,GAC1BO,EAAKtH,OAAO0H,EAAKV,EAAS,IACzBD,GAAUY,IAAOJ,EAAKvH,OAAO,EAAG2H,EAAKZ,GACtCrH,EAAIiD,EAAK5C,OAEFL,MAEJA,EAAI+H,GAAa/H,EAAI8H,IAAc7E,EAAK3C,OAAON,EAAG,QAGrD4H,EAAKQ,MAAQ/B,EAAqBuB,EAAMI,EAAKV,EAAQ,GAGrDI,EAAIE,EADJI,GAAMV,GAEN9F,EAAIoG,EAAKI,EAAK,GACdJ,EAAKvH,OAASuH,EAAK9G,YAAc,EACjC8G,EAAK1G,YAAc+B,EAAK/B,YAAc,EACtC0G,EAAKS,KAAKX,EAAGlG,EAAGkG,EAAGlG,EAAGkG,EAAGlG,EAAGkG,EAAGlG,GAKnC,OADAyB,EAAKnC,YAAc,EACZmC,CACT,CAEA,SAASqF,EAAepI,EAASqI,EAAYC,GAC3CD,EAAaA,GAAc,EAEtBrI,EAAQO,UACXP,EAAQO,QAAU,GAClBP,EAAQa,OAAS,IAGnB,IAWIf,EACAwH,EACA/D,EACAD,EACAD,EACAkF,EACAC,EACA5E,EACAD,EACAD,EACA+E,EACAC,EACAC,EACA5I,EACA6I,EACApI,EACAqI,EA3BA9H,IAAef,EAAQe,YAAc,GACrC+H,EAAM,EAAI/H,EACVgI,EAAWT,EAAYD,EAAyB,EAAZC,EAAgB,EAAItI,EAAQG,OAChEuF,EAAK1F,EAAQqI,GACb1C,EAAK3F,EAAQqI,EAAa,GAC1BW,EAAeX,EAAaA,EAAa,EAAItH,EAAa,EAC1DR,EAAUP,EAAQO,QAClBM,EAASb,EAAQa,OACjBmG,GAAOqB,EAAarI,EAAQc,UAAY/B,IAAcA,EACtDkK,EAAa1I,EAAQyI,EAAeV,EAAYvH,EAAa,GAC7DZ,EAASkI,EAAa9H,EAAQyI,EAAe,GAAK,EAoBtD,IAFAzI,EAAQJ,OAASU,EAAOV,OAAS,EAE5BmH,EAAIe,EAAa,EAAGf,EAAIyB,EAAUzB,GAAK,EAAG,CAS7C,GARA/D,EAAKvD,EAAQsH,EAAI,GAAK5B,EACtBpC,EAAKtD,EAAQsH,EAAI,GAAK5B,EACtBrC,EAAKrD,EAAQsH,GAAK5B,EAClB9B,EAAK5D,EAAQsH,EAAI,GAAK3B,EACtBhC,EAAK3D,EAAQsH,EAAI,GAAK3B,EACtBjC,EAAK1D,EAAQsH,EAAI,GAAK3B,EACtB4C,EAAKC,EAAMC,EAAKC,EAAM,EAElBjK,EAAK8E,GAAM,KAAO9E,EAAKmF,GAAM,KAAOnF,EAAK4E,GAAM5E,EAAKiF,GAAM,IAExD1D,EAAQG,OAAS,IACnBH,EAAQI,OAAOkH,EAAG,GAClBA,GAAK,EACLyB,GAAY,QAGd,IAAKjJ,EAAI,EAAGA,GAAKiB,EAAYjB,IAG3ByI,EAAKC,GAAOA,IAFZzI,EAAI+I,EAAMhJ,GAEaC,EAAIwD,EAAK,GADhCoF,EAAM,EAAI5I,IACiCA,EAAIuD,EAAKqF,EAAMtF,IAAOtD,GACjE0I,EAAKC,GAAOA,GAAO3I,EAAIA,EAAI6D,EAAK,EAAI+E,GAAO5I,EAAI4D,EAAKgF,EAAMjF,IAAO3D,IACjES,EAAI7B,EAAM8J,EAAKA,EAAKF,EAAKA,IAEjBvB,IACNA,EAAMxG,GAGRL,GAAUK,EACVD,EAAQyI,KAAkB7I,EAI9BuF,GAAMnC,EACNoC,GAAM/B,CACR,CAEA,GAAIqF,EAGF,IAFAA,GAAc9I,EAEP6I,EAAezI,EAAQJ,OAAQ6I,IACpCzI,EAAQyI,IAAiBC,EAI7B,GAAI1I,EAAQJ,QAAU6G,GAIpB,GAHAhH,EAAQY,YAAciI,EAAYtI,EAAQA,EAAQJ,OAAS,IAAM,EACjEH,EAAQc,UAAYkG,EAEhB6B,EAAY7B,EAAM,KAIpB,IAFAxG,EAAIoI,EAAc,EAEb9I,EAAI,EAAGA,EAAI+I,EAAW/I,GAAKkH,EAC9BnG,EAAOL,KAAOD,EAAQqI,GAAe9I,IAAM8I,EAAcA,OAI7D5I,EAAQY,YAAcL,EAAQ,GAAK,EAGrC,OAAO8H,EAAalI,EAASI,EAAQ8H,EAAa,EAAI,GAAKlI,CAC7D,CAEO,SAAS8G,EAAyBrH,EAASmB,GAChD,IAAImI,EAAYhG,EAAQpD,EAExB,IAAKA,EAAIoJ,EAAahG,EAAS,EAAGpD,EAAIF,EAAQO,OAAQL,IACpDF,EAAQE,GAAGiB,aAAeA,GAAc,GAExCmC,GAAUtD,EAAQE,GAAGK,OACrB+I,GAAcd,EAAexI,EAAQE,IAKvC,OAFAF,EAAQoB,YAAckC,EACtBtD,EAAQgB,YAAcsI,EACftJ,CACT,CAEO,SAASM,EAAiBF,EAASF,EAAGC,GAC3C,GAAIA,GAAK,GAAKA,GAAK,EACjB,OAAO,EAGT,IAAIoJ,EAAKnJ,EAAQF,GACbsJ,EAAKpJ,EAAQF,EAAI,GACjBuJ,EAAOrJ,EAAQF,EAAI,GACnBwJ,EAAOtJ,EAAQF,EAAI,GACnByJ,EAAOvJ,EAAQF,EAAI,GACnB0J,EAAOxJ,EAAQF,EAAI,GAGnB2J,EAAMN,GAAME,EAAOF,GAAMpJ,EACzBsD,EAAKgG,GAAQE,EAAOF,GAAQtJ,EAC5B2J,EAAMN,GAAME,EAAOF,GAAMrJ,EACzB2D,EAAK4F,GAAQE,EAAOF,GAAQvJ,EAC5B2F,EAAK+D,GAAOpG,EAAKoG,GAAO1J,EACxB4F,EAAK+D,GAAOhG,EAAKgG,GAAO3J,EACxB4J,EAAMJ,GARDvJ,EAAQF,EAAI,GAQEyJ,GAAQxJ,EAC3B6J,EAAMJ,GARDxJ,EAAQF,EAAI,GAQE0J,GAAQzJ,EAU/B,OATAsD,IAAOsG,EAAMtG,GAAMtD,EACnB2D,IAAOkG,EAAMlG,GAAM3D,EACnBC,EAAQI,OAAON,EAAI,EAAG,EAAGL,EAAOgK,GAChChK,EAAOiK,GAAMjK,EAAOiG,GACpBjG,EAAOkG,GAAKlG,EAAOiG,GAAMrC,EAAKqC,GAAM3F,GACpCN,EAAOkG,GAAMjC,EAAKiC,GAAM5F,GAAIN,EAAO4D,GACnC5D,EAAOiE,GAAKjE,EAAOkK,GACnBlK,EAAOmK,IACP5J,EAAQO,SAAWP,EAAQO,QAAQH,OAAON,EAAI,EAAIE,EAAQe,WAAa,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrF,CACT,CAEA,SAAS0G,EAAgB7H,EAASL,EAAUsK,EAAWC,GACrDD,EAAYA,GAAa,CAAC,EAC1BjK,EAAQgB,aAAeqG,EAAyBrH,IAE5CL,EAAW,GAAKA,EAAW,KAC7BA,EAAWD,EAAcC,IAG3B,IAEIgB,EACAQ,EACAZ,EACA6G,EACAL,EACA7G,EACAC,EARAF,EAAW,EACXG,EAAUJ,EAAQ,GAStB,GAAKL,EAGE,GAAiB,IAAbA,EACTQ,EAAI,EAGJD,GADAE,EAAUJ,EADVC,EAAWD,EAAQO,OAAS,IAEhBA,OAAS,MAChB,CACL,GAAIP,EAAQO,OAAS,EAAG,CAKtB,IAHAA,EAASP,EAAQgB,YAAcrB,EAC/BoH,EAAM7G,EAAI,GAEF6G,GAAO/G,EAAQE,KAAKc,aAAeT,GACzCN,EAAWC,EAKbP,GAAYY,GADZ6G,EAAML,GADN3G,EAAUJ,EAAQC,IACEe,eACS+F,EAAMK,IAAQ,CAC7C,CAEAzG,EAAUP,EAAQO,QAClBQ,EAAaf,EAAQe,WAErBZ,EAASH,EAAQY,YAAcrB,EAE/ByH,GADAlH,EAAIE,EAAQa,OAAOV,OAASH,EAAQa,UAAUV,EAASH,EAAQc,aAAe,EAAIR,EAAgBC,EAASJ,EAAQZ,IACzGgB,EAAQT,EAAI,GAAK,GAC3B6G,EAAMpG,EAAQT,IAEJK,IACR6G,EAAML,EACNA,EAAMpG,IAAUT,IAGlBC,EAAI,EAAIgB,IAAeZ,EAAS6G,IAAQL,EAAMK,GAAOlH,EAAIiB,GACzDjB,EAAyB,KAAlBA,EAAIiB,GAEP+I,GAA2B,IAAN/J,IACnBD,EAAI,EAAIE,EAAQG,QAClBL,GAAK,EACLC,EAAI,GACKF,EAAW,EAAID,EAAQO,SAChCL,EAAIC,EAAI,EACRC,EAAUJ,IAAUC,IAG1B,MA/CEE,EAAID,EAAID,EAAW,EACnBG,EAAUJ,EAAQ,GAqDpB,OALAiK,EAAU9J,EAAIA,EACd8J,EAAU/J,EAAIA,EACd+J,EAAU9G,KAAOnD,EACjBiK,EAAU7J,QAAUA,EACpB6J,EAAUhK,SAAWA,EACdgK,CACT,CAEO,SAASE,EAAkBnK,EAASL,EAAUyK,EAAcC,GACjE,IAEI1J,EACAQ,EACAZ,EACA6G,EACAL,EACA7G,EACAC,EACAqG,EACAuC,EAVA3I,EAAUJ,EAAQ,GAClBsK,EAASD,GAAS,CAAC,EAiBvB,IANI1K,EAAW,GAAKA,EAAW,KAC7BA,EAAWD,EAAcC,IAG3BS,EAAQa,QAAUoG,EAAyBrH,GAEvCA,EAAQO,OAAS,EAAG,CAKtB,IAHAA,EAASP,EAAQgB,YAAcrB,EAC/BoH,EAAM7G,EAAI,GAEF6G,GAAO/G,EAAQE,KAAKc,aAAeT,GACzCH,EAAUJ,EAAQE,GAIpBP,GAAYY,GADZ6G,EAAML,EAAM3G,EAAQY,eACS+F,EAAMK,IAAQ,CAC7C,CAyBA,OAvBAzG,EAAUP,EAAQO,QAClBQ,EAAaf,EAAQe,WACrBZ,EAASH,EAAQY,YAAcrB,EAE/ByH,GADAlH,EAAIE,EAAQa,OAAOV,OAASH,EAAQa,OAAOtB,EAAW,KAAOY,EAASH,EAAQc,WAAad,EAAQa,OAAOV,OAAS,IAAM,EAAIG,EAAgBC,EAASJ,EAAQZ,IACpJgB,EAAQT,EAAI,GAAK,GAC3B6G,EAAMpG,EAAQT,IAEJK,IACR6G,EAAML,EACNA,EAAMpG,IAAUT,IAIlB6I,EAAM,GADN5I,EAAI,EAAIgB,IAAeZ,EAAS6G,IAAQL,EAAMK,GAAOlH,EAAIiB,IAAe,GAGxEqF,EAAIpG,EADJF,EAAyB,KAAlBA,EAAIiB,IAEXmJ,EAAOtH,EAAInD,GAAQM,EAAIA,GAAKC,EAAQF,EAAI,GAAKsG,GAAK,EAAIuC,GAAO5I,GAAKC,EAAQF,EAAI,GAAKsG,GAAKuC,GAAO3I,EAAQF,EAAI,GAAKsG,KAAOrG,EAAIqG,GAC3H8D,EAAOjI,EAAIxC,GAAQM,EAAIA,GAAKC,EAAQF,EAAI,IAAMsG,EAAIpG,EAAQF,EAAI,KAAO,EAAI6I,GAAO5I,GAAKC,EAAQF,EAAI,GAAKsG,GAAKuC,GAAO3I,EAAQF,EAAI,GAAKsG,KAAOrG,EAAIqG,GAE1I4D,IACFE,EAAOhC,MAAQlI,EAAQY,YAAcuF,EAAqBnG,EAASF,EAAGC,GAAK,EAAI,EAAI,KAAOA,GAAQ,MAAQC,EAAQkI,OAAS,GAGtHgC,CACT,CAEO,SAASC,EAAiBvK,EAASwG,EAAGC,EAAGC,EAAG8D,EAAGC,EAAIC,GAQxD,IAPA,IACItK,EACAQ,EACAV,EACA8C,EACAX,EALAqF,EAAI1H,EAAQO,SAOPmH,GAAK,GAIZ,IAFA9G,GADAR,EAAUJ,EAAQ0H,IACNnH,OAEPL,EAAI,EAAGA,EAAIU,EAAGV,GAAK,EACtB8C,EAAI5C,EAAQF,GACZmC,EAAIjC,EAAQF,EAAI,GAChBE,EAAQF,GAAK8C,EAAIwD,EAAInE,EAAIqE,EAAI+D,EAC7BrK,EAAQF,EAAI,GAAK8C,EAAIyD,EAAIpE,EAAImI,EAAIE,EAKrC,OADA1K,EAAQgC,OAAS,EACVhC,CACT,CAEA,SAAS2K,EAAaC,EAAOC,EAAOrF,EAAItC,EAAIoF,EAAOwC,EAAcC,EAAW/H,EAAGX,GAC7E,GAAIuI,IAAU5H,GAAK6H,IAAUxI,EAA7B,CAIAmD,EAAK3G,EAAK2G,GACVtC,EAAKrE,EAAKqE,GAEV,IAAI8H,EAAW1C,EAAQ,IAAMjK,EACzB4M,EAAWtM,EAAKqM,GAChBE,EAAWzM,EAAKuM,GAChBzM,EAAKD,KAAKC,GACV4M,EAAa,EAAL5M,EACR6M,GAAOR,EAAQ5H,GAAK,EACpBqI,GAAOR,EAAQxI,GAAK,EACpByD,EAAKmF,EAAWG,EAAMF,EAAWG,EACjCtF,GAAMmF,EAAWE,EAAMH,EAAWI,EAClCC,EAAQxF,EAAKA,EACbyF,EAAQxF,EAAKA,EACbyF,EAAaF,GAAS9F,EAAKA,GAAM+F,GAASrI,EAAKA,GAE/CsI,EAAa,IACfhG,EAAKzG,EAAMyM,GAAchG,EACzBtC,EAAKnE,EAAMyM,GAActI,GAG3B,IAAIuI,EAAQjG,EAAKA,EACbkG,EAAQxI,EAAKA,EACbyI,GAAMF,EAAQC,EAAQD,EAAQF,EAAQG,EAAQJ,IAAUG,EAAQF,EAAQG,EAAQJ,GAEhFK,EAAK,IACPA,EAAK,GAGP,IAAIC,GAAQd,IAAiBC,GAAa,EAAI,GAAKhM,EAAM4M,GACrDE,EAAMD,GAAQpG,EAAKO,EAAK7C,GACxB4I,EAAMF,IAAS1I,EAAK4C,EAAKN,GAGzBI,GAFOgF,EAAQ5H,GAAK,GAERiI,EAAWY,EAAMX,EAAWY,GACxCjG,GAFOgF,EAAQxI,GAAK,GAER6I,EAAWW,EAAMZ,EAAWa,GACxCC,GAAMjG,EAAK+F,GAAOrG,EAClBwG,GAAMjG,EAAK+F,GAAO5I,EAClB+I,IAAOnG,EAAK+F,GAAOrG,EACnB0G,IAAOnG,EAAK+F,GAAO5I,EACnBiJ,EAAOJ,EAAKA,EAAKC,EAAKA,EACtBI,GAAcJ,EAAK,GAAK,EAAI,GAAK1N,KAAK+N,KAAKN,EAAKhN,EAAMoN,IACtDG,GAAeP,EAAKG,EAAKF,EAAKC,EAAK,GAAK,EAAI,GAAK3N,KAAK+N,MAAMN,EAAKE,EAAKD,EAAKE,GAAMnN,EAAMoN,GAAQF,EAAKA,EAAKC,EAAKA,KAElHK,MAAMD,KAAiBA,EAAc/N,IAEhCwM,GAAauB,EAAc,EAC9BA,GAAenB,EACNJ,GAAauB,EAAc,IACpCA,GAAenB,GAGjBiB,GAAcjB,EACdmB,GAAenB,EAEf,IAQIjL,EARAsM,EAAWlO,KAAKmO,KAAK5N,EAAKyN,IAAgBnB,EAAQ,IAClDnL,EAAU,GACV0M,EAAiBJ,EAAcE,EAC/BG,EAAgB,EAAI,EAAIlO,EAAKiO,EAAiB,IAAM,EAAI/N,EAAK+N,EAAiB,IAC9EE,EAAK3B,EAAWzF,EAChBqH,EAAK3B,EAAW1F,EAChBsH,EAAK5B,GAAYhI,EACjB6J,EAAK9B,EAAW/H,EAGpB,IAAKhD,EAAI,EAAGA,EAAIsM,EAAUtM,IAExB4F,EAAKnH,EADL2J,EAAQ8D,EAAalM,EAAIwM,GAEzB3G,EAAKtH,EAAK6J,GACVyD,EAAKpN,EAAK2J,GAASoE,GACnBV,EAAKvN,EAAK6J,GACVtI,EAAQuI,KAAKzC,EAAK6G,EAAgB5G,EAAIA,EAAK4G,EAAgB7G,EAAIiG,EAAKY,EAAgBX,EAAIA,EAAKW,EAAgBZ,EAAIA,EAAIC,GAIvH,IAAK9L,EAAI,EAAGA,EAAIF,EAAQO,OAAQL,GAAK,EACnC4F,EAAK9F,EAAQE,GACb6F,EAAK/F,EAAQE,EAAI,GACjBF,EAAQE,GAAK4F,EAAK8G,EAAK7G,EAAK+G,EAAKlH,EACjC5F,EAAQE,EAAI,GAAK4F,EAAK+G,EAAK9G,EAAKgH,EAAKlH,EAMvC,OAHA7F,EAAQE,EAAI,GAAK8C,EAEjBhD,EAAQE,EAAI,GAAKmC,EACVrC,CAvFP,CAwFF,CAGO,SAASiC,EAAgBuI,GAC9B,IAYItK,EACAwH,EACA1E,EACAX,EACA2K,EACAC,EACA7M,EACA8M,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA1BAjH,GAAKgE,EAAI,IAAIkD,QAAQvP,GAAa,SAAUwP,GAC9C,IAAIC,GAAKD,EACT,OAAOC,EAAI,MAAUA,GAAK,KAAS,EAAIA,CACzC,IAAG5H,MAAM/H,IAAgB,GAEzBkF,EAAO,GACH0K,EAAY,EACZC,EAAY,EACZC,EAAY,EAAI,EAChBC,EAAWxH,EAAEjG,OACb+C,EAAS,EACT2K,EAAe,0BAA4BzD,EAgB3C5H,EAAO,SAAcsL,EAAIC,EAAIC,EAAIC,GACnCjB,GAAQgB,EAAKF,GAAM,EACnBb,GAAQgB,EAAKF,GAAM,EACnB/N,EAAQmI,KAAK2F,EAAKd,EAAMe,EAAKd,EAAMe,EAAKhB,EAAMiB,EAAKhB,EAAMe,EAAIC,EAC/D,EAEA,IAAK7D,IAAM+B,MAAM/F,EAAE,KAAO+F,MAAM/F,EAAE,IAEhC,OADAtE,QAAQoM,IAAIL,GACL9K,EAGT,IAAKjD,EAAI,EAAGA,EAAI8N,EAAU9N,IAyBxB,GAxBAqN,EAAcP,EAEVT,MAAM/F,EAAEtG,IAEV+M,GADAD,EAAUxG,EAAEtG,GAAGqO,iBACU/H,EAAEtG,GAG3BA,IAGF8C,GAAKwD,EAAEtG,EAAI,GACXmC,GAAKmE,EAAEtG,EAAI,GAEP+M,IACFjK,GAAK6K,EACLxL,GAAKyL,GAGF5N,IACHgN,EAASlK,EACTmK,EAAS9K,GAIK,MAAZ2K,EACE5M,IACEA,EAAQG,OAAS,EAEnB4C,EAAK5C,QAAU,EAEf+C,GAAUlD,EAAQG,QAItBsN,EAAYX,EAASlK,EACrB8K,EAAYX,EAAS9K,EACrBjC,EAAU,CAAC4C,EAAGX,GACdc,EAAKoF,KAAKnI,GACVF,GAAK,EACL8M,EAAU,SAEL,GAAgB,MAAZA,EACJ5M,IACHA,EAAU,CAAC,EAAG,IAGX6M,IACHY,EAAYC,EAAY,GAI1B1N,EAAQmI,KAAKvF,EAAGX,EAAGwL,EAAuB,EAAXrH,EAAEtG,EAAI,GAAQ4N,EAAuB,EAAXtH,EAAEtG,EAAI,GAAQ2N,GAAwB,EAAXrH,EAAEtG,EAAI,GAAQ4N,GAAwB,EAAXtH,EAAEtG,EAAI,IACrHA,GAAK,OACA,GAAgB,MAAZ8M,EACTI,EAAOS,EACPR,EAAOS,EAEa,MAAhBP,GAAuC,MAAhBA,IACzBH,GAAQS,EAAYzN,EAAQA,EAAQG,OAAS,GAC7C8M,GAAQS,EAAY1N,EAAQA,EAAQG,OAAS,IAG1C0M,IACHY,EAAYC,EAAY,GAG1B1N,EAAQmI,KAAK6E,EAAMC,EAAMrK,EAAGX,EAAGwL,GAAwB,EAAXrH,EAAEtG,EAAI,GAAQ4N,GAAwB,EAAXtH,EAAEtG,EAAI,IAC7EA,GAAK,OACA,GAAgB,MAAZ8M,EACTI,EAAOS,GAAa7K,EAAI6K,GAAaE,EACrCV,EAAOS,GAAazL,EAAIyL,GAAaC,EAEhCd,IACHY,EAAYC,EAAY,GAG1BD,GAAwB,EAAXrH,EAAEtG,EAAI,GACnB4N,GAAwB,EAAXtH,EAAEtG,EAAI,GACnBE,EAAQmI,KAAK6E,EAAMC,EAAMQ,GAAa7K,EAAI6K,GAAaE,EAAWD,GAAazL,EAAIyL,GAAaC,EAAWF,EAAWC,GACtH5N,GAAK,OACA,GAAgB,MAAZ8M,EACTI,EAAOS,EAAYzN,EAAQA,EAAQG,OAAS,GAC5C8M,EAAOS,EAAY1N,EAAQA,EAAQG,OAAS,GAC5CH,EAAQmI,KAAKsF,EAAYT,EAAMU,EAAYT,EAAMrK,GAAK6K,EAAmB,IAAPT,EAAapK,GAAK+K,EAAW1L,GAAKyL,EAAmB,IAAPT,EAAahL,GAAK0L,EAAWF,EAAY7K,EAAG8K,EAAYzL,GACxKnC,GAAK,OACA,GAAgB,MAAZ8M,EACTpK,EAAKiL,EAAWC,EAAWD,EAAY7K,EAAG8K,GAC1C5N,GAAK,OACA,GAAgB,MAAZ8M,EAETpK,EAAKiL,EAAWC,EAAWD,EAAWC,EAAY9K,GAAKiK,EAAaa,EAAYD,EAAY,IAC5F3N,GAAK,OACA,GAAgB,MAAZ8M,GAA+B,MAAZA,EACZ,MAAZA,IACFhK,EAAIkK,EACJ7K,EAAI8K,EACJ/M,EAAQoO,QAAS,IAGH,MAAZxB,GAAmBnO,EAAKgP,EAAY7K,GAAK,IAAOnE,EAAKiP,EAAYzL,GAAK,MACxEO,EAAKiL,EAAWC,EAAW9K,EAAGX,GAEd,MAAZ2K,IACF9M,GAAK,IAIT2N,EAAY7K,EACZ8K,EAAYzL,OACP,GAAgB,MAAZ2K,EAAiB,CA0B1B,GAzBAQ,EAAQhH,EAAEtG,EAAI,GACduN,EAAQjH,EAAEtG,EAAI,GACdkN,EAAO5G,EAAEtG,EAAI,GACbmN,EAAO7G,EAAEtG,EAAI,GACbwH,EAAI,EAEA8F,EAAMjN,OAAS,IAEbiN,EAAMjN,OAAS,GACjB8M,EAAOD,EACPA,EAAOK,EACP/F,MAEA2F,EAAOI,EACPL,EAAOI,EAAMiB,OAAO,GACpB/G,GAAK,GAGP+F,EAAQD,EAAMkB,OAAO,GACrBlB,EAAQA,EAAMkB,OAAO,IAGvBpB,EAAU3C,EAAakD,EAAWC,GAAYtH,EAAEtG,EAAI,IAAKsG,EAAEtG,EAAI,IAAKsG,EAAEtG,EAAI,IAAKsN,GAAQC,GAAQR,EAAaY,EAAY,GAAY,EAAPT,GAAWH,EAAaa,EAAY,GAAY,EAAPT,GACtKnN,GAAKwH,EAED4F,EACF,IAAK5F,EAAI,EAAGA,EAAI4F,EAAQ/M,OAAQmH,IAC9BtH,EAAQmI,KAAK+E,EAAQ5F,IAIzBmG,EAAYzN,EAAQA,EAAQG,OAAS,GACrCuN,EAAY1N,EAAQA,EAAQG,OAAS,EACvC,MACE2B,QAAQoM,IAAIL,GAehB,OAXA/N,EAAIE,EAAQG,QAEJ,GAEN4C,EAAKwL,MACLzO,EAAI,GACKE,EAAQ,KAAOA,EAAQF,EAAI,IAAME,EAAQ,KAAOA,EAAQF,EAAI,KACrEE,EAAQoO,QAAS,GAGnBrL,EAAK/B,YAAckC,EAASpD,EACrBiD,CACT,CAoDO,SAASyL,EAAoBtL,EAAQuL,QACxB,IAAdA,IACFA,EAAY,GAQd,IALA,IAAI7L,EAAIM,EAAO,GACXjB,EAAI,EACJjC,EAAU,CAAC4C,EAAGX,GACdnC,EAAI,EAEDA,EAAIoD,EAAO/C,OAAQL,GAAK,EAC7BE,EAAQmI,KAAKvF,EAAGX,EAAGiB,EAAOpD,GAAImC,GAAKiB,EAAOpD,GAAK8C,GAAK6L,EAAY,EAAG7L,EAAIM,EAAOpD,IAAKmC,GAGrF,OAAOjC,CACT,CAEO,SAAS0O,EAAgBxL,EAAQuL,GAEtChQ,EAAKyE,EAAO,GAAKA,EAAO,IAAM,MAAQzE,EAAKyE,EAAO,GAAKA,EAAO,IAAM,OAASA,EAASA,EAAO7C,MAAM,IAEnG,IASIsO,EACAC,EACA9O,EACA+O,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAvBA/O,EAAI0C,EAAO/C,OAAS,EACpByC,GAAKM,EAAO,GACZjB,GAAKiB,EAAO,GACZsM,GAAStM,EAAO,GAChBuM,GAASvM,EAAO,GAChBlD,EAAU,CAAC4C,EAAGX,EAAGW,EAAGX,GACpB+I,EAAMwE,EAAQ5M,EACdqI,EAAMwE,EAAQxN,EACdmM,EAASlQ,KAAKQ,IAAIwE,EAAO1C,GAAKoC,GAAK,MAAS1E,KAAKQ,IAAIwE,EAAO1C,EAAI,GAAKyB,GAAK,KA8B9E,IAbImM,IAEFlL,EAAOiF,KAAKqH,EAAOC,GACnBD,EAAQ5M,EACR6M,EAAQxN,EACRW,EAAIM,EAAO1C,EAAI,GACfyB,EAAIiB,EAAO1C,EAAI,GACf0C,EAAOwM,QAAQ9M,EAAGX,GAClBzB,GAAK,GAGPiO,EAAYA,GAA2B,IAAdA,GAAmBA,EAAY,EAEnD3O,EAAI,EAAGA,EAAIU,EAAGV,GAAK,EACtB6O,EAAQ/L,EACRgM,EAAQ3M,EACRW,EAAI4M,EACJvN,EAAIwN,EACJD,GAAStM,EAAOpD,EAAI,GACpB2P,GAASvM,EAAOpD,EAAI,GAEhB8C,IAAM4M,GAASvN,IAAMwN,IAIzBZ,EAAM7D,EACN8D,EAAM7D,EACND,EAAMwE,EAAQ5M,EACdqI,EAAMwE,EAAQxN,EAKdgN,IAJAF,EAAKpQ,EAAMkQ,EAAMA,EAAMC,EAAMA,KAE7BE,EAAKrQ,EAAMqM,EAAMA,EAAMC,EAAMA,KAEZwD,EAAY,IADxB9P,EAAMT,KAAKyR,IAAI3E,EAAMgE,EAAKH,EAAME,EAAI,GAAK7Q,KAAKyR,IAAI1E,EAAM+D,EAAKF,EAAMC,EAAI,IAI5EK,EAAMxM,IAFNsM,EAAMtM,GAAKA,EAAI+L,IAAUI,EAAKE,EAAKF,EAAK,OACxCI,EAAMvM,GAAK4M,EAAQ5M,IAAMoM,EAAKC,EAAKD,EAAK,IACfE,IAAa,EAALH,GAAUA,EAAKC,GAAM,IAAO,GAAK,IAGlEO,EAAMtN,IAFNoN,EAAMpN,GAAKA,EAAI2M,IAAUG,EAAKE,EAAKF,EAAK,OACxCO,EAAMrN,GAAKwN,EAAQxN,IAAM+M,EAAKC,EAAKD,EAAK,IACfK,IAAa,EAALN,GAAUA,EAAKC,GAAM,IAAO,GAAK,IAE9DpM,IAAM+L,GAAS1M,IAAM2M,GACvB5O,EAAQmI,KAAK1I,EAAOyP,EAAME,GAC1B3P,EAAO4P,EAAME,GAAM9P,EAAOmD,GAC1BnD,EAAOwC,GAAIxC,EAAO0P,EAAMC,GACxB3P,EAAO6P,EAAMC,KAcjB,OAVA3M,IAAM4M,GAASvN,IAAMwN,GAASzP,EAAQG,OAAS,EAAIH,EAAQmI,KAAK1I,EAAO+P,GAAQ/P,EAAOgQ,GAAQhQ,EAAO+P,GAAQ/P,EAAOgQ,IAAUzP,EAAQG,QAAU,EAEzH,IAAnBH,EAAQG,OAEVH,EAAQmI,KAAKvF,EAAGX,EAAGW,EAAGX,EAAGW,EAAGX,GACnBmM,IACTpO,EAAQI,OAAO,EAAG,GAClBJ,EAAQG,OAASH,EAAQG,OAAS,GAG7BH,CACT,CAmLO,SAAS8F,EAAgBlG,GAC1BV,EAAUU,EAAQ,MAEpBA,EAAU,CAACA,IAGb,IAEIgQ,EACApI,EACA1H,EACAE,EALAkK,EAAS,GACT1J,EAAIZ,EAAQO,OAMhB,IAAKqH,EAAI,EAAGA,EAAIhH,EAAGgH,IAAK,CAKtB,IAJAxH,EAAUJ,EAAQ4H,GAClB0C,GAAU,IAAMzK,EAAOO,EAAQ,IAAM,IAAMP,EAAOO,EAAQ,IAAM,KAChE4P,EAAK5P,EAAQG,OAERL,EAAI,EAAGA,EAAI8P,EAAI9P,IAClBoK,GAAUzK,EAAOO,EAAQF,MAAQ,IAAML,EAAOO,EAAQF,MAAQ,IAAML,EAAOO,EAAQF,MAAQ,IAAML,EAAOO,EAAQF,MAAQ,IAAML,EAAOO,EAAQF,MAAQ,IAAML,EAAOO,EAAQF,IAAM,IAG9KE,EAAQoO,SACVlE,GAAU,IAEd,CAEA,OAAOA,CACT,CCt2CA,IAAI2F,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAGAC,GAFAC,GAAiB,YACjBC,GAAuBD,GAAiB,SAExCE,GAAU,SAAiB/N,GAC7B,IAAIgO,EAAMhO,EAAQiO,eAAiBjO,IAE7B6N,MAAkB7N,EAAQkO,QAAU,gBAAiBlO,EAAQkO,QAGjEJ,IADAD,GAAiB,eACuB,UAG1C,KAAOG,EAAIzK,aAAeyK,EAAMA,EAAIzK,cAKpC,GAHA8J,GAAOc,OACPT,GAAkB,IAAIU,GAElBJ,EAAK,CACPZ,EAAOY,EACPV,GAAcU,EAAIK,gBAClBd,GAAQS,EAAIM,MACZX,GAAOP,EAAKtL,gBAAgB,6BAA8B,MAErDoM,MAAMK,UAAY,OAEvB,IAAIC,EAAKR,EAAIS,cAAc,OACvBC,EAAKV,EAAIS,cAAc,OAE3BlB,GAAMoB,YAAYH,GAElBA,EAAGG,YAAYD,GACfF,EAAGN,MAAMU,SAAW,SACpBJ,EAAGN,MAAML,IAAkB,uBAC3BD,GAAgBc,EAAGG,eAAiBL,EAEpCjB,GAAM9J,YAAY+K,EACpB,CAEA,OAAOR,CACT,EAsCAc,GAAY,GAEZC,GAAY,GAORC,GAAY,SAAmBhP,GACjC,OAAOA,EAAQiP,kBAA6D,SAAxCjP,EAAQwB,QAAU,IAAIC,cAA0BzB,EAAU,KAChG,EACIkP,GAAW,SAASA,EAASlP,GAC/B,MAAgD,UAA5CqN,GAAK8B,iBAAiBnP,GAAS4O,YAInC5O,EAAUA,EAAQuD,aAEkB,IAArBvD,EAAQoP,SAEdF,EAASlP,QAFlB,EAIF,EACIqP,GAAiB,SAASA,EAAerP,EAAS3C,GACpD,GAAI2C,EAAQuD,aAAe6J,GAAQW,GAAQ/N,IAAW,CACpD,IAAIsP,EAAMN,GAAUhP,GAChBuP,EAAKD,EAAMA,EAAIrQ,aAAa,UAAY,6BAA+B,+BACvEsC,EAAO+N,EAAMjS,EAAI,OAAS,IAAM,MAChC8C,EAAU,IAAN9C,EAAU,EAAI,IAClBmC,EAAU,IAANnC,EAAU,IAAM,EACpBmS,EAAM,0EACN3Q,EAAIuO,EAAKtL,gBAAkBsL,EAAKtL,gBAAgByN,EAAG1E,QAAQ,SAAU,QAAStJ,GAAQ6L,EAAKqB,cAAclN,GAsB7G,OApBIlE,IACGiS,GAUH7B,KAAkBA,GAAgB4B,EAAerP,IACjDnB,EAAEuE,aAAa,QAAS,KACxBvE,EAAEuE,aAAa,SAAU,KACzBvE,EAAEuE,aAAa,YAAa,aAAejD,EAAI,IAAMX,EAAI,KAEzDiO,GAAckB,YAAY9P,KAdrB2O,MACHA,GAAgB6B,EAAerP,IACjBkO,MAAMuB,QAAUD,GAGhC3Q,EAAEqP,MAAMuB,QAAUD,EAAM,gCAAkChQ,EAAI,WAAaW,EAAI,KAE/EqN,GAAcmB,YAAY9P,KAWvBA,CACT,CAEA,KAAM,2BACR,EA6BI6Q,GAAiB,SAAwB1P,EAAS2P,GACpD,IAIIC,EACA9E,EACAlH,EACAzD,EACAX,EACAqQ,EATAP,EAAMN,GAAUhP,GAChB8P,EAAY9P,IAAYsP,EACxBS,EAAWT,EAAMR,GAAYC,GAC7BiB,EAAShQ,EAAQuD,WAQrB,GAAIvD,IAAYqN,GACd,OAAOrN,EAMT,GAHA+P,EAASrS,QAAUqS,EAASrK,KAAK2J,GAAerP,EAAS,GAAIqP,GAAerP,EAAS,GAAIqP,GAAerP,EAAS,IACjH4P,EAAYN,EAAM7B,GAAgBD,GAE9B8B,EACEQ,GACFlM,EAtCQ,SAAiB0L,GAC7B,IACIf,EADAzD,EAAIwE,EAAIW,SAcZ,OAXKnF,IAEHyD,EAAYe,EAAIpB,MAAML,IACtByB,EAAIpB,MAAML,IAAkB,OAE5ByB,EAAIX,YAAYhB,IAChB7C,EAAI6C,GAAKsC,SACTX,EAAI7L,YAAYkK,IAChBY,EAAYe,EAAIpB,MAAML,IAAkBU,EAAYe,EAAIpB,MAAMgC,eAAerC,GAAehD,QAAQ,WAAY,OAAOpJ,gBAGlHqJ,GAAK4C,GAAgByC,OAC9B,CAsBUC,CAAQpQ,GACZG,GAAKyD,EAAE/E,EAAI+E,EAAED,EACbnE,GAAKoE,EAAEyM,EAAIzM,EAAE+D,EACbmD,EAAI4C,IACK1N,EAAQ2B,SACjBiC,EAAI5D,EAAQ2B,UAKZxB,GAFA2K,GAFAA,EAAI9K,EAAQuO,UAAYvO,EAAQuO,UAAU+B,QAAU,CAAC,GAE9CC,cAAkCzF,EAAEyF,cAAgB,EAzD9C,SAAsBzF,GAKvC,IAHA,IAAIjH,EAAI,IAAIuK,GACR/Q,EAAI,EAEDA,EAAIyN,EAAEyF,cAAelT,IAC1BwG,EAAE2M,SAAS1F,EAAE2F,QAAQpT,GAAGqT,QAG1B,OAAO7M,CACT,CA+CqE8M,CAAa7F,GAAKA,EAAE2F,QAAQ,GAAGC,OAAvEhD,IAEjB/J,EAAIC,EAAEzD,EAAI2K,EAAEjH,EAAID,EAAEpE,EACxBA,EAAIsL,EAAElH,EAAIA,EAAEzD,EAAI2K,EAAEnD,EAAI/D,EAAEpE,IAGxBsL,EAAI,IAAIsD,GACRjO,EAAIX,EAAI,GAGNmQ,GAAmD,MAAlC3P,EAAQwB,QAAQC,gBACnCtB,EAAIX,EAAI,IAGTsQ,EAAYR,EAAMU,GAAQrB,YAAYiB,GACvCA,EAAUxM,aAAa,YAAa,UAAY0H,EAAEnH,EAAI,IAAMmH,EAAElH,EAAI,IAAMkH,EAAEjH,EAAI,IAAMiH,EAAEnD,EAAI,KAAOmD,EAAEjM,EAAIsB,GAAK,KAAO2K,EAAEuF,EAAI7Q,GAAK,SACzH,CAGL,GAFAW,EAAIX,EAAI,EAEJoO,GAKF,IAHA9C,EAAI9K,EAAQ6O,aACZjL,EAAI5D,EAEG4D,IAAMA,EAAIA,EAAEL,aAAeK,IAAMkH,GAAKlH,EAAEL,aACxC8J,GAAK8B,iBAAiBvL,GAAGiK,IAAkB,IAAInQ,OAAS,IAC3DyC,EAAIyD,EAAEgN,WACNpR,EAAIoE,EAAEiN,UACNjN,EAAI,GAOV,GAAoB,cAFpBiM,EAAKxC,GAAK8B,iBAAiBnP,IAEpB4O,UAA2C,UAAhBiB,EAAGjB,SAGnC,IAFA9D,EAAI9K,EAAQ6O,aAELmB,GAAUA,IAAWlF,GAE1B3K,GAAK6P,EAAOc,YAAc,EAC1BtR,GAAKwQ,EAAOe,WAAa,EACzBf,EAASA,EAAOzM,YAIpBK,EAAIgM,EAAU1B,OACZ8C,IAAMhR,EAAQ6Q,UAAYrR,EAAI,KAChCoE,EAAEqN,KAAOjR,EAAQ4Q,WAAazQ,EAAI,KAClCyD,EAAEiK,IAAkBgC,EAAGhC,IACvBjK,EAAEkK,IAAwB+B,EAAG/B,IAM7BlK,EAAEgL,SAA2B,UAAhBiB,EAAGjB,SAAuB,QAAU,WACjD5O,EAAQuD,WAAWoL,YAAYiB,EACjC,CAEA,OAAOA,CACT,EACIsB,GAAa,SAAoBpG,EAAGnH,EAAGC,EAAGC,EAAG8D,EAAG9I,EAAGwR,GAOrD,OANAvF,EAAEnH,EAAIA,EACNmH,EAAElH,EAAIA,EACNkH,EAAEjH,EAAIA,EACNiH,EAAEnD,EAAIA,EACNmD,EAAEjM,EAAIA,EACNiM,EAAEuF,EAAIA,EACCvF,CACT,EAEWsD,GAAwB,WACjC,SAASA,EAASzK,EAAGC,EAAGC,EAAG8D,EAAG9I,EAAGwR,QACrB,IAAN1M,IACFA,EAAI,QAGI,IAANC,IACFA,EAAI,QAGI,IAANC,IACFA,EAAI,QAGI,IAAN8D,IACFA,EAAI,QAGI,IAAN9I,IACFA,EAAI,QAGI,IAANwR,IACFA,EAAI,GAGNa,GAAWC,KAAMxN,EAAGC,EAAGC,EAAG8D,EAAG9I,EAAGwR,EAClC,CAEA,IAAIe,EAAShD,EAASiD,UA6DtB,OA3DAD,EAAOE,QAAU,WACf,IAAI3N,EAAIwN,KAAKxN,EACTC,EAAIuN,KAAKvN,EACTC,EAAIsN,KAAKtN,EACT8D,EAAIwJ,KAAKxJ,EACT9I,EAAIsS,KAAKtS,EACTwR,EAAIc,KAAKd,EACTkB,EAAc5N,EAAIgE,EAAI/D,EAAIC,GAAK,MACnC,OAAOqN,GAAWC,KAAMxJ,EAAI4J,GAAc3N,EAAI2N,GAAc1N,EAAI0N,EAAa5N,EAAI4N,GAAc1N,EAAIwM,EAAI1I,EAAI9I,GAAK0S,IAAe5N,EAAI0M,EAAIzM,EAAI/E,GAAK0S,EAClJ,EAEAH,EAAOZ,SAAW,SAAkBE,GAClC,IAAI/M,EAAIwN,KAAKxN,EACTC,EAAIuN,KAAKvN,EACTC,EAAIsN,KAAKtN,EACT8D,EAAIwJ,KAAKxJ,EACT9I,EAAIsS,KAAKtS,EACTwR,EAAIc,KAAKd,EACTmB,EAAKd,EAAO/M,EACZ8N,EAAKf,EAAO7M,EACZ6N,EAAKhB,EAAO9M,EACZ8K,EAAKgC,EAAO/I,EACZgK,EAAKjB,EAAO7R,EACZ+S,EAAKlB,EAAOL,EAChB,OAAOa,GAAWC,KAAMK,EAAK7N,EAAI+N,EAAK7N,EAAG2N,EAAK5N,EAAI8N,EAAK/J,EAAG8J,EAAK9N,EAAI+K,EAAK7K,EAAG4N,EAAK7N,EAAI8K,EAAK/G,EAAG9I,EAAI8S,EAAKhO,EAAIiO,EAAK/N,EAAGwM,EAAIsB,EAAK/N,EAAIgO,EAAKjK,EACrI,EAEAyJ,EAAOjB,MAAQ,WACb,OAAO,IAAI/B,EAAS+C,KAAKxN,EAAGwN,KAAKvN,EAAGuN,KAAKtN,EAAGsN,KAAKxJ,EAAGwJ,KAAKtS,EAAGsS,KAAKd,EACnE,EAEAe,EAAOS,OAAS,SAAgBnB,GAC9B,IAAI/M,EAAIwN,KAAKxN,EACTC,EAAIuN,KAAKvN,EACTC,EAAIsN,KAAKtN,EACT8D,EAAIwJ,KAAKxJ,EACT9I,EAAIsS,KAAKtS,EACTwR,EAAIc,KAAKd,EACb,OAAO1M,IAAM+M,EAAO/M,GAAKC,IAAM8M,EAAO9M,GAAKC,IAAM6M,EAAO7M,GAAK8D,IAAM+I,EAAO/I,GAAK9I,IAAM6R,EAAO7R,GAAKwR,IAAMK,EAAOL,CAChH,EAEAe,EAAOU,MAAQ,SAAetK,EAAOJ,QACjB,IAAdA,IACFA,EAAY,CAAC,GAGf,IAAIjH,EAAIqH,EAAMrH,EACVX,EAAIgI,EAAMhI,EACVmE,EAAIwN,KAAKxN,EACTC,EAAIuN,KAAKvN,EACTC,EAAIsN,KAAKtN,EACT8D,EAAIwJ,KAAKxJ,EACT9I,EAAIsS,KAAKtS,EACTwR,EAAIc,KAAKd,EAGb,OAFAjJ,EAAUjH,EAAIA,EAAIwD,EAAInE,EAAIqE,EAAIhF,GAAK,EACnCuI,EAAU5H,EAAIW,EAAIyD,EAAIpE,EAAImI,EAAI0I,GAAK,EAC5BjJ,CACT,EAEOgH,CACT,CA3FmC,GAmG5B,SAAS2D,GAAgB/R,EAASsR,EAAS3B,EAAeqC,GAE/D,IAAKhS,IAAYA,EAAQuD,aAAe6J,GAAQW,GAAQ/N,IAAUqO,kBAAoBrO,EACpF,OAAO,IAAIoO,GAGb,IAAI6D,EA1UmB,SAA4BpT,GAInD,IAFA,IAAI8E,EAAGuO,EAEArT,GAAKA,IAAM0O,KAChB2E,EAAQrT,EAAEsT,QACDD,EAAME,SAAWF,EAAMG,IAAIxT,EAAG,KAEnCqT,IAAUA,EAAMI,SAAWJ,EAAMK,QAAUL,EAAMM,kBACnDN,EAAMI,OAASJ,EAAMK,OAAS,KAC9BL,EAAMM,gBAAgB,EAAGN,GACzBvO,EAAIA,EAAE+B,KAAKwM,GAASvO,EAAI,CAACuO,IAG3BrT,EAAIA,EAAE0E,WAGR,OAAOI,CACT,CAwTmB8O,CAAmBzS,GAEhC0S,EADM1D,GAAUhP,GACF8O,GAAYC,GAC1Ba,EAAYF,GAAe1P,EAAS2P,GACpCgD,EAAKD,EAAM,GAAGE,wBACdnB,EAAKiB,EAAM,GAAGE,wBACdC,EAAKH,EAAM,GAAGE,wBACd5C,EAASJ,EAAUrM,WACnBuP,GAAWd,GAAwB9C,GAASlP,GAC5C8K,EAAI,IAAIsD,IAAUqD,EAAGR,KAAO0B,EAAG1B,MAAQ,KAAMQ,EAAGT,IAAM2B,EAAG3B,KAAO,KAAM6B,EAAG5B,KAAO0B,EAAG1B,MAAQ,KAAM4B,EAAG7B,IAAM2B,EAAG3B,KAAO,IAAK2B,EAAG1B,MAAQ6B,EAAU,EAvS3IzF,GAAK0F,aAAe3F,EAAK0D,YAAcxD,GAAYwD,YAAcvD,GAAMuD,YAAc,GAuSgF6B,EAAG3B,KAAO8B,EAAU,EA1SzLzF,GAAK2F,aAAe5F,EAAK2D,WAAazD,GAAYyD,WAAaxD,GAAMwD,WAAa,IA8SzF,GAFAf,EAAOvM,YAAYmM,GAEfqC,EAGF,IAFAU,EAAKV,EAAWvU,OAETiV,MACLlB,EAAKQ,EAAWU,IACbL,OAASb,EAAGc,OAAS,EACxBd,EAAGe,gBAAgB,EAAGf,GAI1B,OAAOH,EAAUxG,EAAEwG,UAAYxG,CACjC,CC/YA,IAGI,GACAmI,GACAC,GACAC,GACAC,GACAC,GARAC,GAAU,wCAAwC9Q,MAAM,KACxD+Q,GAAU,sCAAsC/Q,MAAM,KACtD,GAAW/G,KAAKC,GAAK,IAUrB8X,GAA4B,SAAmCjW,EAASkW,EAAQC,EAAUC,GAO5F,IALA,IAAI5V,EAAI0V,EAAO/V,OACX4H,EAAc,IAATqO,EAAa,EAAIA,EACtBtW,EAAI,EAGDA,EAAIU,EAAGV,IACZE,EAAQ+H,GAAUsO,WAAWH,EAAOpW,GAAGqW,IAC9B,IAATC,IAAepW,EAAQ+H,EAAK,GAAK,GACjCA,GAAM,EAGR,OAAO/H,CACT,EACIsW,GAAc,SAAqBC,EAAQC,EAAMC,GACnD,OAAOJ,WAAWE,EAAO3B,MAAME,IAAIyB,EAAQC,EAAMC,GAAQ,QAAU,CACrE,EACIC,GAAc,SAAqB1W,GACrC,IAEIF,EAFA8C,EAAI5C,EAAQ,GACZiC,EAAIjC,EAAQ,GAGhB,IAAKF,EAAI,EAAGA,EAAIE,EAAQG,OAAQL,GAAK,EACnC8C,EAAI5C,EAAQF,IAAM8C,EAClBX,EAAIjC,EAAQF,EAAI,IAAMmC,CAE1B,EAgBA0U,GAAoB,SAA2BC,EAAQ5W,EAASuW,EAAQ3T,EAAGX,EAAG4U,EAAQC,EAAMC,EAAOC,GAC/E,UAAdF,EAAK9S,KACPhE,EAAU,CAACA,KAEU,IAArB8W,EAAKG,aAAyBjX,EAAQ0P,QAAQ4G,GAAYC,EAAQ3T,EAAGmU,GAAQ9U,EAAIqU,GAAYC,EAAQtU,EAAG+U,GAAS,GACjHF,EAAKI,UAAYR,GAAY1W,GAE7BA,EAAU,EADMiC,EAAIyM,EAAkBF,GACjBxO,EAAS8W,EAAKrI,aAQrC,OALAzO,EAAU6W,EAAOM,GAAOnX,EAASuW,EAAQO,IAEzCM,GAAyBR,EAAQL,EAAQ3T,EAAG5C,EAAS,IAAK+W,GAE1D9U,GAAKmV,GAAyBR,EAAQL,EAAQtU,EAAGjC,EAAS,IAAKgX,GACxD/P,EAAyBjH,EAAS8W,EAAK/V,aAAkC,IAAnB+V,EAAKrI,UAAkB,GAAK,IAC3F,EACI4I,GAAa,SAAoBC,GACnC,OAAOA,CACT,EACIC,GAAU,+BACVC,GAAiB,SAAwB/U,EAASgV,EAAQC,GAE5D,IAGI3F,EAHAxE,EAAIiH,GAAgB/R,GACpBG,EAAI,EACJX,EAAI,EAkBR,MAf6C,SAAxCQ,EAAQwB,QAAU,IAAIC,eACzB6N,EAAMtP,EAAQkV,QAAQ5E,SAClB1N,QAAU0M,EAAM,CAClB1M,OAAQ5C,EAAQf,aAAa,SAC7B4D,QAAS7C,EAAQf,aAAa,YAGhCqQ,EAAM0F,GAAUhV,EAAQ2B,SAAW3B,EAAQ2B,UAGzCqT,GAAqB,SAAXA,IACZ7U,EAAI6U,EAAOtP,KAAOsP,EAAO,IAAM1F,EAAMA,EAAI1M,MAAQ5C,EAAQmV,aAAe,GAAKH,EAAO7U,EACpFX,EAAIwV,EAAOtP,KAAOsP,EAAO,IAAM1F,EAAMA,EAAIzM,OAAS7C,EAAQoV,cAAgB,GAAKJ,EAAOxV,GAGjFyV,EAAanD,MAAM3R,GAAKX,EAAIsL,EAAEgH,MAAM,CACzC3R,EAAGA,EACHX,EAAGA,IACA,CACHW,EAAG2K,EAAEjM,EACLW,EAAGsL,EAAEuF,GAET,EACIgF,GAAkB,SAAyBC,EAAaC,EAAWC,EAAYC,GACjF,IAMIC,EANAT,EAAelD,GAAgBuD,EAAY/R,YAAY,GAAM,GAC7DuH,EAAImK,EAAa9E,QAAQK,SAASuB,GAAgBwD,IAClDI,EAAYZ,GAAeO,EAAaE,EAAYP,GACpDW,EAAkBb,GAAeQ,EAAWE,EAAUR,GACtD9U,EAAIyV,EAAgBzV,EACpBX,EAAIoW,EAAgBpW,EAwBxB,OArBAsL,EAAEjM,EAAIiM,EAAEuF,EAAI,EAEK,SAAboF,GAAuBF,EAAUM,gBAAsD,SAApCN,EAAU/T,QAAQC,gBACvEiU,EAAIH,EAAUtW,aAAa,KAAKkE,MAAM2R,KAAY,GAKlD3U,IAJAuV,EAAI5K,EAAEgH,MAAM,CACV3R,GAAIuV,EAAE,GACNlW,GAAIkW,EAAE,MAEDvV,EACPX,GAAKkW,EAAElW,GAILkW,IAEFvV,IADAuV,EAAI5K,EAAEgH,MAAMyD,EAAU5T,YACfxB,EACPX,GAAKkW,EAAElW,GAGTsL,EAAEjM,EAAIsB,EAAIwV,EAAUxV,EACpB2K,EAAEuF,EAAI7Q,EAAImW,EAAUnW,EACbsL,CACT,EACI4J,GAAS,SAAgBvX,EAAS2W,EAAQgC,GAC5C,IAUIC,EACAjL,EACA4K,EAZAM,EAAQF,EAAKE,MACbtF,EAASoF,EAAKpF,OACduF,EAAUH,EAAKG,QACfC,EAAUJ,EAAKI,QACfC,EAAcL,EAAKK,YAEnBhW,EAAIhD,EAAQ,GAAG,GACfqC,EAAIrC,EAAQ,GAAG,GACfiZ,EAAOvC,GAAYC,EAAQ,KAC3BuC,EAAOxC,GAAYC,EAAQ,KAK/B,OAAK3W,GAAYA,EAAQO,QAIrBsY,IACY,SAAVA,IAAqBD,EAAc5C,GAAS6C,GAAO,IAAMlC,KAAYA,EACvEpM,EAAiBvK,EAAS,EAAG,EAAG,EAAG,EAAGiZ,EAAOjW,EAAGkW,EAAO7W,IAEnD2W,IAAkC,IAAnBA,EAAY,GAC7B,GAAKG,IAAIxC,EAAQ,CACfyC,gBAAkC,IAAjBJ,EAAY,GAAW,KAAwB,IAAjBA,EAAY,GAAW,MAGxEA,EAAc,CAACtC,GAAYC,EAAQ,aAAe,IAAKD,GAAYC,EAAQ,aAAe,KAI5F4B,GADA5K,EAAIuK,GAAgBvB,EAAQiC,EAAaI,EAAa,SAChDrE,MAAM,CACV3R,EAAGA,EACHX,EAAGA,IAELkI,EAAiBvK,EAAS2N,EAAEnH,EAAGmH,EAAElH,EAAGkH,EAAEjH,EAAGiH,EAAEnD,EAAGyO,EAAOtL,EAAEjM,GAAK6W,EAAEvV,EAAI2K,EAAEjM,GAAIwX,EAAOvL,EAAEuF,GAAKqF,EAAElW,EAAIsL,EAAEuF,MAI9FK,EACFhJ,EAAiBvK,EAASuT,EAAO/M,EAAG+M,EAAO9M,EAAG8M,EAAO7M,EAAG6M,EAAO/I,EAAG+I,EAAO7R,EAAG6R,EAAOL,IAC1E4F,GAAWC,IACpBxO,EAAiBvK,EAAS,EAAG,EAAG,EAAG,EAAG8Y,GAAW,EAAGC,GAAW,GAG1D/Y,GA9BEyB,EAAW,WA+BtB,EACI+V,GAA2B,SAAkCR,EAAQL,EAAQJ,EAAUvW,EAASqZ,EAAcC,GAChH,IAAIvE,EAAQ4B,EAAO3B,MACfuE,EAAUxE,EAAMwE,QAChBC,EAAQD,GAAWA,EAAQE,SAAWF,EAAQE,QAAQlD,GACtDK,EAAO4C,GAASA,EAAMzU,QAAQ,KAAO,EAAIyU,EAAQjD,EACjDmD,EAAK1C,EAAO2C,IAAM,IAAI7D,GAAUkB,EAAO2C,IAAKhD,EAAQC,EAAM,EAAG,EAAGa,GAAY,EAAG1C,EAAMoE,IAAIxC,EAAQC,EAAMI,IAC3G0C,EAAGE,EAAI7D,GAAShB,EAAMG,IAAIyB,EAAQC,EAAM0C,KAAe,EACvDI,EAAGvW,KAAOnD,EACV0Z,EAAGG,GAAKR,EAERrC,EAAO8C,OAAOvR,KAAKqO,EACrB,EAOWmD,GAAmB,CAC5BC,QAAS,SACTtV,KAAM,aACNuV,SAAU,SAAkBC,EAAMC,EAAQC,GAExCrE,IADA,GAAOmE,GACSG,MAAMC,QACtBtE,GAAW,GAAKqE,MAAME,QACtBtE,GAAiB,GAAKiE,KAAKM,cAE3BtE,GAAa,GAAKgE,KAAKO,WAAa,WAAa,EAEjD3E,GAAYsE,CACd,EACAM,KAAM,SAAc/D,EAAQO,EAAMyD,GAChC,IAAK,GAEH,OADAzY,QAAQC,KAAK,iDACN,EAGa,iBAAT+U,IAAsBA,EAAKnG,OAAWmG,EAAK/T,OACtD+T,EAAO,CACL/T,KAAM+T,IAIV,IAUIlX,EACAuY,EA1CqC3R,EAAOC,EA+B5C+T,EAAW,GACXC,EAAQ3D,EACR/T,EAAO0X,EAAM1X,KACb2X,EAAaD,EAAMC,WACnB3D,EAAQ0D,EAAM1D,MACdC,EAAQyD,EAAMzD,MACdpU,EAAI6X,EAAM7X,EACVX,EAAIwY,EAAMxY,EACV0Y,EAAW5X,EAAK,GAChB8T,GAxCqCrQ,EAwCbsQ,EAAKtQ,MAxCeC,EAwCR,QAASqQ,EAAOA,EAAKrQ,IAAM,EAvC9D,SAAU7G,GACf,OAAO4G,GAAiB,IAARC,EAAYF,EAAa3G,EAAS4G,EAAOC,GAAO7G,CAClE,GAyDE,GAhBAgU,KAAK4G,SAAWA,EAChB5G,KAAK2C,OAASA,EACd3C,KAAK2G,MAAQA,EACb3G,KAAKgH,OAAS/E,IAAkBA,GAAeU,EAAQ,cAEnD3C,KAAKiH,OAASH,GAA6B,IAAfA,KAE9B9G,KAAKkH,QAAUzE,WAAWqE,IAAe,EACzC9G,KAAKmH,UAAYjE,EAAKkE,WACtBpH,KAAKqH,MAAQnE,EAAKoE,UAAY,WAE9BtH,KAAKuH,KAAO5E,EAAO3B,MAAMmE,IAAIxC,EAAQ3C,KAAKqH,MAAOrH,MAEjDA,KAAKwH,GAAKzF,GAASY,EAAO3B,MAAME,IAAIyB,EAAQ3C,KAAKqH,SAAW,GAG1DI,MAAMC,QAAQvY,MAAW,WAAYA,IAA6B,iBAAb4X,EAAuB,CAC9E,IAAKxC,KAAKwC,GACH/X,IAAMmT,GAAQpR,QAAQwT,GACzBvV,EAAIuV,GACMlW,IAAM+T,GAAQrR,QAAQwT,KAChClW,EAAIkW,GAWR,IAAKA,KAPDvV,GAAKX,EAEPuY,EAASrS,KAAKwO,GAAkB/C,KAAMqC,GAA0BA,GAA0B,GAAIlT,EAAMH,EAAG,GAAIG,EAAMd,EAAG,GAAIsU,EAAQ3T,EAAGX,EAAG4U,EAAQC,EAAMC,GAASpB,GAAS5S,EAAK,GAAGH,IAAKoU,GAASrB,GAAS5S,EAAK,GAAGd,MAE7MW,EAAIX,EAAI,EAGA0Y,EACRxC,IAAMvV,GAAKuV,IAAMlW,GAAKuY,EAASrS,KAAKwO,GAAkB/C,KAAMqC,GAA0B,GAAIlT,EAAMoV,EAAG,GAAI5B,EAAQ4B,EAAG,EAAGtB,EAAQC,EAAMnB,GAAS5S,EAAK,GAAGoV,KAExJ,MAEElR,EADArH,EAAUiX,EAAOM,GAAO9V,EAAWyV,EAAK/T,MAAOwT,EAAQO,IACrBA,EAAK/V,YACvCyZ,EAASrS,KAAKvI,GAEdwX,GAAyBxD,KAAM2C,EAAQO,EAAKlU,GAAK,IAAKhD,EAAS,IAAKkX,EAAKC,OAAS,MAElFK,GAAyBxD,KAAM2C,EAAQO,EAAK7U,GAAK,IAAKrC,EAAS,IAAKkX,EAAKE,OAAS,KAEtF,EACAuE,OAAQ,SAAgBC,EAAO7Y,GAC7B,IAAI6X,EAAW7X,EAAK6X,SAChB1a,EAAI0a,EAASra,OACbmZ,EAAK3W,EAAK4W,IAEd,GAAI5W,EAAK4X,MAAMkB,QAAU3F,KAAc,CAOrC,IANI0F,EAAQ,EACVA,EAAQ,EACCA,EAAQ,IACjBA,EAAQ,GAGH1b,KACLiK,EAAkByQ,EAAS1a,GAAI0b,GAAQ1b,GAAK6C,EAAKkY,OAAQL,EAAS1a,IAGpE,KAAOwZ,GACLA,EAAGP,IAAIO,EAAGvZ,EAAGuZ,EAAGnB,EAAGmB,EAAGvW,KAAKuW,EAAGG,IAAMH,EAAGE,EAAGF,EAAGlP,EAAGoR,GAChDlC,EAAKA,EAAGoC,MAGV/Y,EAAKkY,QAAUlY,EAAKwY,KAAKxY,EAAK4T,OAAQ5T,EAAKsY,MAAOT,EAAS,GAAGtS,OAASvF,EAAKoY,QAAU,GAAW,GAAKpY,EAAKmY,QAAUnY,EAAKyY,GAAIzY,EAAM6Y,EACtI,MACE7Y,EAAKiY,OAAOe,QAEhB,EACAC,UAAW,SAAmB7Y,GAC5B,OAAOkE,EAAyB5F,EAAW0B,IAAOnC,WACpD,EACA2F,aAAcA,EACdlF,WAAYA,EACZqN,gBAAiBA,EACjB7M,gBAAiBA,EACjBiE,gBAAiBA,EACjBqE,iBAAkBA,EAClBqK,gBAAiBA,GACjBzK,kBAAmBA,EACnB9C,yBAA0BA,EAC1B4U,cAAe,SAAuBC,EAASpZ,GAC7C,OAAOkT,GAASkG,GAASC,KAAI,SAAUxF,GACrC,OAAO,EAAeA,GAAiB,IAAT7T,EAChC,GACF,EACAsZ,mBAAoB,SAA4BjE,EAAaC,EAAW/N,GACtE,IAAIsD,EAAIiH,GAAgBwD,GAAW,GAAM,GAAM/E,SAASuB,GAAgBuD,IACxE,OAAO9N,EAAQsD,EAAEgH,MAAMtK,GAASsD,CAClC,EACA0O,eAAgBnE,GAChBoE,oBAAqB,SAA6BnE,EAAaC,EAAWC,EAAYC,GACpF,IAAI3K,EAAIuK,GAAgBC,EAAaC,EAAWC,EAAYC,GAE5D,MAAO,CACLtV,EAAG2K,EAAEjM,EACLW,EAAGsL,EAAEuF,EAET,EACAqJ,eAAgB,SAAwBld,EAAO6X,GAG7C,IAAI9W,EAAUiW,GAA0BA,GAA0B,GAAIhX,GAFtE6X,EAAOA,GAAQ,CAAC,GAEkElU,GAAK,IAAK,GAAI3D,EAAO6X,EAAK7U,GAAK,IAAK,GAGtH,OADA6U,EAAKI,UAAYR,GAAY1W,GACtB,CAAe,UAAd8W,EAAK9S,KAAmBhE,EAAU0O,EAAgB1O,EAAS8W,EAAKrI,WAC1E,IApVO,IAA0B,oBAAXmC,SAA2B,GAAOA,OAAOwL,OAAS,GAAKC,gBAAkB,KAsVnF,GAAKA,eAAe1C,mBCnWlC,MAAM2C,IAAYC,EAAAA,EAAAA,IAAcC,IAAK,CACnCC,UAAW,IACNC,EAAAA,GAAAA,MACHC,SAAU,GACV,CAACH,EAAMI,GAAGC,YAAYC,EAAAA,EAAAA,KAAiB,CACrCH,SAAU,KAGdI,gBAAiB,IACZL,EAAAA,GAAAA,KACHM,UAAW,GACXC,WAAY,IACZ,CAACT,EAAMI,GAAGC,YAAYC,EAAAA,EAAAA,KAAiB,CACrCH,SAAU,KAGdO,kBAAmB,CACjBC,QAAS,OACTC,UAAW,QACXC,WAAY,SACZ,CAACb,EAAMI,GAAGC,YAAYC,EAAAA,EAAAA,KAAiB,CACrCQ,cAAe,SACfC,eAAgB,SAChBC,QAAS,aAGbC,yBAA0B,CACxBC,KAAM,IACNP,QAAS,OACTG,cAAe,SACfC,eAAgB,SAChB,CAACf,EAAMI,GAAGC,YAAYC,EAAAA,EAAAA,KAAiB,CACrCa,SAAUb,EAAAA,EAAAA,GACVc,UAAW,WAGfC,sBAAuB,CACrBT,UAAW,aA8Df,OA1DiB,KACf,MAAM,QAAEU,GAAYxB,KA6BpB,OA3BAyB,EAAAA,EAAAA,YAAU,KACR3B,EAAAA,GAAAA,eAAoBzC,GAAkBqE,GAAAA,GACtC5B,EAAAA,GAAAA,GAAQ,eAAgB,CACtB6B,SAAU,EACVC,WAAY,CACVnb,KAAM,cACN0V,MAAO,cACPG,YAAa,CAAC,GAAK,IACnB8B,YAAY,GAEdyD,cAAe,CACbC,QAAS,cACT5X,MAAO,MACP6X,OAAO,EACPC,KAAK,GAEPC,KAAM,SAGR,MAAMC,EAAahd,SAASid,eAAe,eAE3CrC,EAAAA,GAAAA,SAAc,CAAEsC,QAAS,IACxBC,GAAGH,EAAY,CAAEP,SAAU,EAAGW,MAAO,EAAGL,KAAM,eAC9CI,GAAGH,EAAY,CAAEP,SAAU,EAAGW,MAAO,EAAGL,KAAM,gBAAiB,GAE/D,IAGD,uBAAKM,UAAU,QACblO,MAAO,CAAEmO,gBAAiBC,EAAAA,GAAAA,WAC1BC,GAAG,cACD,gBAACC,EAAA,EAAS,CAACC,KAAM,KAAML,UAAWf,EAAQD,uBACxC,uBAAKgB,UAAWf,EAAQZ,mBACtB,uBAAK2B,UAAWf,EAAQL,0BACtB,sBAAIoB,UAAWf,EAAQrB,UAAW9L,MAAO,CAACwO,MAAO,SAAS,cAC1D,uBAAKH,GAAG,cACN,qBAAGA,GAAG,OAAOH,UAAWf,EAAQf,gBAAiBpM,MAAO,CAACwO,MAAO,SAC7DC,EAAAA,GAAAA,uBAIP,uBACEzO,MAAO,CACL+M,KAAM,EACNrY,MAAO,SAGT,gBAAC,IAAmB,SAItB,wBC1GZ,IAAIga,EAAQ,EAAQ,MAEpB,SAASC,EAActa,GACnB,OAAOqa,EAAMnO,cAAc,MAAMlM,EAAM,CAACqa,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2MAA2M,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,iHAAiH,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2MAA2M,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2MAA2M,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0MAA0M,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,uMAAuM,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2MAA2M,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2MAA2M,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,iHAAiH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4MAA4M,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0MAA0M,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4GAA4G,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2MAA2M,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,sMAAsM,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2MAA2M,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,yHAAyH,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mGAAmG,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mGAAmG,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4JAA4J,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,6VAA6V,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0GAA0G,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,SAAS,EAAI,WAAW,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,SAAS,EAAI,WAAW,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0HAA0H,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mGAAmG,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kGAAkG,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2JAA2J,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,4VAA4V,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,wGAAwG,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,SAAS,EAAI,WAAW,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,SAAS,EAAI,WAAW,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oGAAoG,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oGAAoG,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0JAA0J,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,iWAAiW,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4GAA4G,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,WAAW,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,WAAW,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,+WAA+W,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,GAAK,aAAa,EAAI,mOAAmO,OAAS,UAAU,YAAc,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,IAAI,CAAC,QAAU,MAAM,IAAM,IAAI,CAACmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,2HAA2H,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,SAAS,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,0HAA0H,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,SAAS,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,SAAS,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,gHAAgH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,IAAI,CAAC,QAAU,MAAM,IAAM,IAAI,CAACmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,2HAA2H,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,QAAQ,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,kLAAkL,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,UAAY,kCAAkC,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,UAAY,kCAAkC,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,kCAAkC,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,kCAAkC,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,SAAS,GAAK,UAAU,EAAI,UAAU,UAAY,iCAAiC,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,kCAAkC,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,kCAAkC,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,kCAAkC,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,+GAA+G,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,iOAAiO,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2BAA2B,OAAS,UAAU,YAAc,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2BAA2B,OAAS,UAAU,YAAc,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,yEAAyE,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mDAAmD,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mDAAmD,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4EAA4E,KAAO,UAAU,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4EAA4E,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,KAAKmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,SAAS,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mIAAmI,OAAS,QAAQ,YAAc,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,yNAAyN,OAAS,QAAQ,YAAc,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0PAA0P,OAAS,QAAQ,YAAc,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,IAAI,CAAC,QAAU,MAAM,IAAM,KAAK,CAACmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,wHAAwH,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,IAAI,CAAC,QAAU,MAAM,IAAM,KAAK,CAACmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,wHAAwH,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,QAAQ,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,IAAImO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,UAAY,iCAAiC,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,GAAK,UAAU,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4EAA4E,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,SAAS,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,GAAK,UAAU,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,+GAA+G,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4EAA4E,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,SAAS,MAAQ,UAAU,OAAS,UAAU,GAAK,UAAU,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0EAA0E,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,UAAU,EAAI,UAAU,MAAQ,UAAU,OAAS,UAAU,GAAK,UAAU,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oHAAoH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4EAA4E,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4HAA4H,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mNAAmN,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,+MAA+M,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,kCAAkC,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,mCAAmC,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,mHAAmH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,MAAQ,UAAU,OAAS,UAAU,UAAY,kCAAkC,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,iHAAiH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,kHAAkH,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,SAAW,UAAU,SAAW,UAAU,EAAI,2jBAA2jB,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,4sCAA4sC,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,oiCAAoiC,OAAS,UAAU,YAAc,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,qiCAAqiC,OAAS,UAAU,YAAc,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,8jHAA8jH,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,2BAA2B,OAAS,QAAQ,YAAc,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,y4aAAy4a,KAAO,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,OAAO,CAAC,EAAI,0BAA0B,OAAS,QAAQ,YAAc,UAAU,IAAM,MAAMmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,UAAU,GAAK,UAAU,EAAI,UAAU,KAAO,QAAQ,IAAM,MAAMmO,EAAMnO,cAAc,SAAS,CAAC,GAAK,cAAc,GAAK,MAAM,GAAK,MAAM,EAAI,MAAM,UAAY,yBAAyB,KAAO,UAAU,OAAS,UAAU,YAAc,IAAI,eAAiB,QAAQ,IAAM,OAChqkD,CAEAoO,EAAaC,aAAe,CAAC,MAAQ,OAAO,OAAS,MAAM,QAAU,cAAc,KAAO,QAE1FC,EAAOC,QAAUH,EAEjBA,EAAaI,QAAUJ","sources":["webpack://arya-pulses-website/./node_modules/gsap/utils/paths.js","webpack://arya-pulses-website/./node_modules/gsap/utils/matrix.js","webpack://arya-pulses-website/./node_modules/gsap/MotionPathPlugin.js","webpack://arya-pulses-website/./src/pages/sections/WhatWeDo.js","webpack://arya-pulses-website/./src/images/illustration.svg"],"sourcesContent":["/*!\n * paths 3.11.5\n * https://greensock.com\n *\n * Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _numbersExp = /(?:(-)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n    _selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i,\n    _DEG2RAD = Math.PI / 180,\n    _RAD2DEG = 180 / Math.PI,\n    _sin = Math.sin,\n    _cos = Math.cos,\n    _abs = Math.abs,\n    _sqrt = Math.sqrt,\n    _atan2 = Math.atan2,\n    _largeNum = 1e8,\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _isNumber = function _isNumber(value) {\n  return typeof value === \"number\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _temp = {},\n    _temp2 = {},\n    _roundingNum = 1e5,\n    _wrapProgress = function _wrapProgress(progress) {\n  return Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum || (progress < 0 ? 0 : 1);\n},\n    //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.\n_round = function _round(value) {\n  return Math.round(value * _roundingNum) / _roundingNum || 0;\n},\n    _roundPrecise = function _roundPrecise(value) {\n  return Math.round(value * 1e10) / 1e10 || 0;\n},\n    _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {\n  var segment = rawPath[segIndex],\n      shift = t === 1 ? 6 : subdivideSegment(segment, i, t);\n\n  if (shift && shift + i + 2 < segment.length) {\n    rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));\n    segment.splice(0, i + shift);\n    return 1;\n  }\n},\n    _getSampleIndex = function _getSampleIndex(samples, length, progress) {\n  // slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;\n  var l = samples.length,\n      i = ~~(progress * l);\n\n  if (samples[i] > length) {\n    while (--i && samples[i] > length) {}\n\n    i < 0 && (i = 0);\n  } else {\n    while (samples[++i] < length && i < l) {}\n  }\n\n  return i < l ? i : l - 1;\n},\n    _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {\n  var i = rawPath.length;\n  skipOuter || rawPath.reverse();\n\n  while (i--) {\n    rawPath[i].reversed || reverseSegment(rawPath[i]);\n  }\n},\n    _copyMetaData = function _copyMetaData(source, copy) {\n  copy.totalLength = source.totalLength;\n\n  if (source.samples) {\n    //segment\n    copy.samples = source.samples.slice(0);\n    copy.lookup = source.lookup.slice(0);\n    copy.minLength = source.minLength;\n    copy.resolution = source.resolution;\n  } else if (source.totalPoints) {\n    //rawPath\n    copy.totalPoints = source.totalPoints;\n  }\n\n  return copy;\n},\n    //pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)\n_appendOrMerge = function _appendOrMerge(rawPath, segment) {\n  var index = rawPath.length,\n      prevSeg = rawPath[index - 1] || [],\n      l = prevSeg.length;\n\n  if (index && segment[0] === prevSeg[l - 2] && segment[1] === prevSeg[l - 1]) {\n    segment = prevSeg.concat(segment.slice(2));\n    index--;\n  }\n\n  rawPath[index] = segment;\n},\n    _bestDistance;\n/* TERMINOLOGY\n - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple \"M\" commands, defining Segments (paths aren't always connected).\n - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.\n - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.\n - the variable \"t\" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the \"p\" or \"progress\" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. \"t\" is ONLY in an individual Bezier piece.\n */\n//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).\n\n\nexport function getRawPath(value) {\n  value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;\n  var e = value.getAttribute ? value : 0,\n      rawPath;\n\n  if (e && (value = value.getAttribute(\"d\"))) {\n    //implements caching\n    if (!e._gsPath) {\n      e._gsPath = {};\n    }\n\n    rawPath = e._gsPath[value];\n    return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);\n  }\n\n  return !value ? console.warn(\"Expecting a <path> element or an SVG path data string\") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;\n} //copies a RawPath WITHOUT the length meta data (for speed)\n\nexport function copyRawPath(rawPath) {\n  var a = [],\n      i = 0;\n\n  for (; i < rawPath.length; i++) {\n    a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));\n  }\n\n  return _copyMetaData(rawPath, a);\n}\nexport function reverseSegment(segment) {\n  var i = 0,\n      y;\n  segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.\n\n  for (; i < segment.length; i += 2) {\n    y = segment[i];\n    segment[i] = segment[i + 1];\n    segment[i + 1] = y;\n  }\n\n  segment.reversed = !segment.reversed;\n}\n\nvar _createPath = function _createPath(e, ignore) {\n  var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"),\n      attr = [].slice.call(e.attributes),\n      i = attr.length,\n      name;\n  ignore = \",\" + ignore + \",\";\n\n  while (--i > -1) {\n    name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.\n\n    if (ignore.indexOf(\",\" + name + \",\") < 0) {\n      path.setAttributeNS(null, name, attr[i].nodeValue);\n    }\n  }\n\n  return path;\n},\n    _typeAttrs = {\n  rect: \"rx,ry,x,y,width,height\",\n  circle: \"r,cx,cy\",\n  ellipse: \"rx,ry,cx,cy\",\n  line: \"x1,x2,y1,y2\"\n},\n    _attrToObj = function _attrToObj(e, attrs) {\n  var props = attrs ? attrs.split(\",\") : [],\n      obj = {},\n      i = props.length;\n\n  while (--i > -1) {\n    obj[props[i]] = +e.getAttribute(props[i]) || 0;\n  }\n\n  return obj;\n}; //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.\n\n\nexport function convertToPath(element, swap) {\n  var type = element.tagName.toLowerCase(),\n      circ = 0.552284749831,\n      data,\n      x,\n      y,\n      r,\n      ry,\n      path,\n      rcirc,\n      rycirc,\n      points,\n      w,\n      h,\n      x2,\n      x3,\n      x4,\n      x5,\n      x6,\n      y2,\n      y3,\n      y4,\n      y5,\n      y6,\n      attr;\n\n  if (type === \"path\" || !element.getBBox) {\n    return element;\n  }\n\n  path = _createPath(element, \"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points\");\n  attr = _attrToObj(element, _typeAttrs[type]);\n\n  if (type === \"rect\") {\n    r = attr.rx;\n    ry = attr.ry || r;\n    x = attr.x;\n    y = attr.y;\n    w = attr.width - r * 2;\n    h = attr.height - ry * 2;\n\n    if (r || ry) {\n      //if there are rounded corners, render cubic beziers\n      x2 = x + r * (1 - circ);\n      x3 = x + r;\n      x4 = x3 + w;\n      x5 = x4 + r * circ;\n      x6 = x4 + r;\n      y2 = y + ry * (1 - circ);\n      y3 = y + ry;\n      y4 = y3 + h;\n      y5 = y4 + ry * circ;\n      y6 = y4 + ry;\n      data = \"M\" + x6 + \",\" + y3 + \" V\" + y4 + \" C\" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(\",\") + \"z\";\n    } else {\n      data = \"M\" + (x + w) + \",\" + y + \" v\" + h + \" h\" + -w + \" v\" + -h + \" h\" + w + \"z\";\n    }\n  } else if (type === \"circle\" || type === \"ellipse\") {\n    if (type === \"circle\") {\n      r = ry = attr.r;\n      rycirc = r * circ;\n    } else {\n      r = attr.rx;\n      ry = attr.ry;\n      rycirc = ry * circ;\n    }\n\n    x = attr.cx;\n    y = attr.cy;\n    rcirc = r * circ;\n    data = \"M\" + (x + r) + \",\" + y + \" C\" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(\",\") + \"z\";\n  } else if (type === \"line\") {\n    data = \"M\" + attr.x1 + \",\" + attr.y1 + \" L\" + attr.x2 + \",\" + attr.y2; //previously, we just converted to \"Mx,y Lx,y\" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.\n  } else if (type === \"polyline\" || type === \"polygon\") {\n    points = (element.getAttribute(\"points\") + \"\").match(_numbersExp) || [];\n    x = points.shift();\n    y = points.shift();\n    data = \"M\" + x + \",\" + y + \" L\" + points.join(\",\");\n\n    if (type === \"polygon\") {\n      data += \",\" + x + \",\" + y + \"z\";\n    }\n  }\n\n  path.setAttribute(\"d\", rawPathToString(path._gsRawPath = stringToRawPath(data)));\n\n  if (swap && element.parentNode) {\n    element.parentNode.insertBefore(path, element);\n    element.parentNode.removeChild(element);\n  }\n\n  return path;\n} //returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)\n\nexport function getRotationAtProgress(rawPath, progress) {\n  var d = getProgressData(rawPath, progress >= 1 ? 1 - 1e-9 : progress ? progress : 1e-9);\n  return getRotationAtBezierT(d.segment, d.i, d.t);\n}\n\nfunction getRotationAtBezierT(segment, i, t) {\n  var a = segment[i],\n      b = segment[i + 2],\n      c = segment[i + 4],\n      x;\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  x = b + (c + (segment[i + 6] - c) * t - b) * t - a;\n  a = segment[i + 1];\n  b = segment[i + 3];\n  c = segment[i + 5];\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  return _round(_atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG);\n}\n\nexport function sliceRawPath(rawPath, start, end) {\n  end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.\n\n  start = _roundPrecise(start) || 0;\n  var loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),\n      path = copyRawPath(rawPath);\n\n  if (start > end) {\n    start = 1 - start;\n    end = 1 - end;\n\n    _reverseRawPath(path);\n\n    path.totalLength = 0;\n  }\n\n  if (start < 0 || end < 0) {\n    var offset = Math.abs(~~Math.min(start, end)) + 1;\n    start += offset;\n    end += offset;\n  }\n\n  path.totalLength || cacheRawPathMeasurements(path);\n  var wrap = end > 1,\n      s = getProgressData(path, start, _temp, true),\n      e = getProgressData(path, end, _temp2),\n      eSeg = e.segment,\n      sSeg = s.segment,\n      eSegIndex = e.segIndex,\n      sSegIndex = s.segIndex,\n      ei = e.i,\n      si = s.i,\n      sameSegment = sSegIndex === eSegIndex,\n      sameBezier = ei === si && sameSegment,\n      wrapsBehind,\n      sShift,\n      eShift,\n      i,\n      copy,\n      totalSegments,\n      l,\n      j;\n\n  if (wrap || loops) {\n    wrapsBehind = eSegIndex < sSegIndex || sameSegment && ei < si || sameBezier && e.t < s.t;\n\n    if (_splitSegment(path, sSegIndex, si, s.t)) {\n      sSegIndex++;\n\n      if (!wrapsBehind) {\n        eSegIndex++;\n\n        if (sameBezier) {\n          e.t = (e.t - s.t) / (1 - s.t);\n          ei = 0;\n        } else if (sameSegment) {\n          ei -= si;\n        }\n      }\n    }\n\n    if (Math.abs(1 - (end - start)) < 1e-5) {\n      eSegIndex = sSegIndex - 1;\n    } else if (!e.t && eSegIndex) {\n      eSegIndex--;\n    } else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {\n      sSegIndex++;\n    }\n\n    if (s.t === 1) {\n      sSegIndex = (sSegIndex + 1) % path.length;\n    }\n\n    copy = [];\n    totalSegments = path.length;\n    l = 1 + totalSegments * loops;\n    j = sSegIndex;\n    l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;\n\n    for (i = 0; i < l; i++) {\n      _appendOrMerge(copy, path[j++ % totalSegments]);\n    }\n\n    path = copy;\n  } else {\n    eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);\n\n    if (start !== end) {\n      sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);\n      sameSegment && (eShift += sShift);\n      eSeg.splice(ei + eShift + 2);\n      (sShift || si) && sSeg.splice(0, si + sShift);\n      i = path.length;\n\n      while (i--) {\n        //chop off any extra segments\n        (i < sSegIndex || i > eSegIndex) && path.splice(i, 1);\n      }\n    } else {\n      eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!\n\n      ei += eShift;\n      s = eSeg[ei];\n      e = eSeg[ei + 1];\n      eSeg.length = eSeg.totalLength = 0;\n      eSeg.totalPoints = path.totalPoints = 8;\n      eSeg.push(s, e, s, e, s, e, s, e);\n    }\n  }\n\n  path.totalLength = 0;\n  return path;\n} //measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a \"samples\" Array that has the length up to each of those sample points (always increasing from the start) as well as a \"lookup\" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a \"totalLength\" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.\n\nfunction measureSegment(segment, startIndex, bezierQty) {\n  startIndex = startIndex || 0;\n\n  if (!segment.samples) {\n    segment.samples = [];\n    segment.lookup = [];\n  }\n\n  var resolution = ~~segment.resolution || 12,\n      inc = 1 / resolution,\n      endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,\n      x1 = segment[startIndex],\n      y1 = segment[startIndex + 1],\n      samplesIndex = startIndex ? startIndex / 6 * resolution : 0,\n      samples = segment.samples,\n      lookup = segment.lookup,\n      min = (startIndex ? segment.minLength : _largeNum) || _largeNum,\n      prevLength = samples[samplesIndex + bezierQty * resolution - 1],\n      length = startIndex ? samples[samplesIndex - 1] : 0,\n      i,\n      j,\n      x4,\n      x3,\n      x2,\n      xd,\n      xd1,\n      y4,\n      y3,\n      y2,\n      yd,\n      yd1,\n      inv,\n      t,\n      lengthIndex,\n      l,\n      segLength;\n  samples.length = lookup.length = 0;\n\n  for (j = startIndex + 2; j < endIndex; j += 6) {\n    x4 = segment[j + 4] - x1;\n    x3 = segment[j + 2] - x1;\n    x2 = segment[j] - x1;\n    y4 = segment[j + 5] - y1;\n    y3 = segment[j + 3] - y1;\n    y2 = segment[j + 1] - y1;\n    xd = xd1 = yd = yd1 = 0;\n\n    if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) {\n      //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)\n      if (segment.length > 8) {\n        segment.splice(j, 6);\n        j -= 6;\n        endIndex -= 6;\n      }\n    } else {\n      for (i = 1; i <= resolution; i++) {\n        t = inc * i;\n        inv = 1 - t;\n        xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);\n        yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);\n        l = _sqrt(yd * yd + xd * xd);\n\n        if (l < min) {\n          min = l;\n        }\n\n        length += l;\n        samples[samplesIndex++] = length;\n      }\n    }\n\n    x1 += x4;\n    y1 += y4;\n  }\n\n  if (prevLength) {\n    prevLength -= length;\n\n    for (; samplesIndex < samples.length; samplesIndex++) {\n      samples[samplesIndex] += prevLength;\n    }\n  }\n\n  if (samples.length && min) {\n    segment.totalLength = segLength = samples[samples.length - 1] || 0;\n    segment.minLength = min;\n\n    if (segLength / min < 9999) {\n      // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array\n      l = lengthIndex = 0;\n\n      for (i = 0; i < segLength; i += min) {\n        lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;\n      }\n    }\n  } else {\n    segment.totalLength = samples[0] = 0;\n  }\n\n  return startIndex ? length - samples[startIndex / 2 - 1] : length;\n}\n\nexport function cacheRawPathMeasurements(rawPath, resolution) {\n  var pathLength, points, i;\n\n  for (i = pathLength = points = 0; i < rawPath.length; i++) {\n    rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)\n\n    points += rawPath[i].length;\n    pathLength += measureSegment(rawPath[i]);\n  }\n\n  rawPath.totalPoints = points;\n  rawPath.totalLength = pathLength;\n  return rawPath;\n} //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)\n\nexport function subdivideSegment(segment, i, t) {\n  if (t <= 0 || t >= 1) {\n    return 0;\n  }\n\n  var ax = segment[i],\n      ay = segment[i + 1],\n      cp1x = segment[i + 2],\n      cp1y = segment[i + 3],\n      cp2x = segment[i + 4],\n      cp2y = segment[i + 5],\n      bx = segment[i + 6],\n      by = segment[i + 7],\n      x1a = ax + (cp1x - ax) * t,\n      x2 = cp1x + (cp2x - cp1x) * t,\n      y1a = ay + (cp1y - ay) * t,\n      y2 = cp1y + (cp2y - cp1y) * t,\n      x1 = x1a + (x2 - x1a) * t,\n      y1 = y1a + (y2 - y1a) * t,\n      x2a = cp2x + (bx - cp2x) * t,\n      y2a = cp2y + (by - cp2y) * t;\n  x2 += (x2a - x2) * t;\n  y2 += (y2a - y2) * t;\n  segment.splice(i + 2, 4, _round(x1a), //first control point\n  _round(y1a), _round(x1), //second control point\n  _round(y1), _round(x1 + (x2 - x1) * t), //new fabricated anchor on line\n  _round(y1 + (y2 - y1) * t), _round(x2), //third control point\n  _round(y2), _round(x2a), //fourth control point\n  _round(y2a));\n  segment.samples && segment.samples.splice(i / 6 * segment.resolution | 0, 0, 0, 0, 0, 0, 0, 0);\n  return 6;\n} // returns an object {path, segment, segIndex, i, t}\n\nfunction getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {\n  decoratee = decoratee || {};\n  rawPath.totalLength || cacheRawPathMeasurements(rawPath);\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  var segIndex = 0,\n      segment = rawPath[0],\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t;\n\n  if (!progress) {\n    t = i = segIndex = 0;\n    segment = rawPath[0];\n  } else if (progress === 1) {\n    t = 1;\n    segIndex = rawPath.length - 1;\n    segment = rawPath[segIndex];\n    i = segment.length - 8;\n  } else {\n    if (rawPath.length > 1) {\n      //speed optimization: most of the time, there's only one segment so skip the recursion.\n      length = rawPath.totalLength * progress;\n      max = i = 0;\n\n      while ((max += rawPath[i++].totalLength) < length) {\n        segIndex = i;\n      }\n\n      segment = rawPath[segIndex];\n      min = max - segment.totalLength;\n      progress = (length - min) / (max - min) || 0;\n    }\n\n    samples = segment.samples;\n    resolution = segment.resolution; //how many samples per cubic bezier chunk\n\n    length = segment.totalLength * progress;\n    i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);\n    min = i ? samples[i - 1] : 0;\n    max = samples[i];\n\n    if (max < length) {\n      min = max;\n      max = samples[++i];\n    }\n\n    t = 1 / resolution * ((length - min) / (max - min) + i % resolution);\n    i = ~~(i / resolution) * 6;\n\n    if (pushToNextIfAtEnd && t === 1) {\n      if (i + 6 < segment.length) {\n        i += 6;\n        t = 0;\n      } else if (segIndex + 1 < rawPath.length) {\n        i = t = 0;\n        segment = rawPath[++segIndex];\n      }\n    }\n  }\n\n  decoratee.t = t;\n  decoratee.i = i;\n  decoratee.path = rawPath;\n  decoratee.segment = segment;\n  decoratee.segIndex = segIndex;\n  return decoratee;\n}\n\nexport function getPositionOnPath(rawPath, progress, includeAngle, point) {\n  var segment = rawPath[0],\n      result = point || {},\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t,\n      a,\n      inv;\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  segment.lookup || cacheRawPathMeasurements(rawPath);\n\n  if (rawPath.length > 1) {\n    //speed optimization: most of the time, there's only one segment so skip the recursion.\n    length = rawPath.totalLength * progress;\n    max = i = 0;\n\n    while ((max += rawPath[i++].totalLength) < length) {\n      segment = rawPath[i];\n    }\n\n    min = max - segment.totalLength;\n    progress = (length - min) / (max - min) || 0;\n  }\n\n  samples = segment.samples;\n  resolution = segment.resolution;\n  length = segment.totalLength * progress;\n  i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);\n  min = i ? samples[i - 1] : 0;\n  max = samples[i];\n\n  if (max < length) {\n    min = max;\n    max = samples[++i];\n  }\n\n  t = 1 / resolution * ((length - min) / (max - min) + i % resolution) || 0;\n  inv = 1 - t;\n  i = ~~(i / resolution) * 6;\n  a = segment[i];\n  result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);\n  result.y = _round((t * t * (segment[i + 7] - (a = segment[i + 1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);\n\n  if (includeAngle) {\n    result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;\n  }\n\n  return result;\n} //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).\n\nexport function transformRawPath(rawPath, a, b, c, d, tx, ty) {\n  var j = rawPath.length,\n      segment,\n      l,\n      i,\n      x,\n      y;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 0; i < l; i += 2) {\n      x = segment[i];\n      y = segment[i + 1];\n      segment[i] = x * a + y * c + tx;\n      segment[i + 1] = x * b + y * d + ty;\n    }\n  }\n\n  rawPath._dirty = 1;\n  return rawPath;\n} // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.\n\nfunction arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n  if (lastX === x && lastY === y) {\n    return;\n  }\n\n  rx = _abs(rx);\n  ry = _abs(ry);\n\n  var angleRad = angle % 360 * _DEG2RAD,\n      cosAngle = _cos(angleRad),\n      sinAngle = _sin(angleRad),\n      PI = Math.PI,\n      TWOPI = PI * 2,\n      dx2 = (lastX - x) / 2,\n      dy2 = (lastY - y) / 2,\n      x1 = cosAngle * dx2 + sinAngle * dy2,\n      y1 = -sinAngle * dx2 + cosAngle * dy2,\n      x1_sq = x1 * x1,\n      y1_sq = y1 * y1,\n      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\n  if (radiiCheck > 1) {\n    rx = _sqrt(radiiCheck) * rx;\n    ry = _sqrt(radiiCheck) * ry;\n  }\n\n  var rx_sq = rx * rx,\n      ry_sq = ry * ry,\n      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);\n\n  if (sq < 0) {\n    sq = 0;\n  }\n\n  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),\n      cx1 = coef * (rx * y1 / ry),\n      cy1 = coef * -(ry * x1 / rx),\n      sx2 = (lastX + x) / 2,\n      sy2 = (lastY + y) / 2,\n      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n      ux = (x1 - cx1) / rx,\n      uy = (y1 - cy1) / ry,\n      vx = (-x1 - cx1) / rx,\n      vy = (-y1 - cy1) / ry,\n      temp = ux * ux + uy * uy,\n      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\n  isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.\n\n  if (!sweepFlag && angleExtent > 0) {\n    angleExtent -= TWOPI;\n  } else if (sweepFlag && angleExtent < 0) {\n    angleExtent += TWOPI;\n  }\n\n  angleStart %= TWOPI;\n  angleExtent %= TWOPI;\n\n  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),\n      rawPath = [],\n      angleIncrement = angleExtent / segments,\n      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n      ma = cosAngle * rx,\n      mb = sinAngle * rx,\n      mc = sinAngle * -ry,\n      md = cosAngle * ry,\n      i;\n\n  for (i = 0; i < segments; i++) {\n    angle = angleStart + i * angleIncrement;\n    x1 = _cos(angle);\n    y1 = _sin(angle);\n    ux = _cos(angle += angleIncrement);\n    uy = _sin(angle);\n    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n  } //now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).\n\n\n  for (i = 0; i < rawPath.length; i += 2) {\n    x1 = rawPath[i];\n    y1 = rawPath[i + 1];\n    rawPath[i] = x1 * ma + y1 * mc + cx;\n    rawPath[i + 1] = x1 * mb + y1 * md + cy;\n  }\n\n  rawPath[i - 2] = x; //always set the end to exactly where it's supposed to be\n\n  rawPath[i - 1] = y;\n  return rawPath;\n} //Spits back a RawPath with absolute coordinates. Each segment starts with a \"moveTo\" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.\n\n\nexport function stringToRawPath(d) {\n  var a = (d + \"\").replace(_scientific, function (m) {\n    var n = +m;\n    return n < 0.0001 && n > -0.0001 ? 0 : n;\n  }).match(_svgPathExp) || [],\n      //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n  path = [],\n      relativeX = 0,\n      relativeY = 0,\n      twoThirds = 2 / 3,\n      elements = a.length,\n      points = 0,\n      errorMessage = \"ERROR: malformed path: \" + d,\n      i,\n      j,\n      x,\n      y,\n      command,\n      isRelative,\n      segment,\n      startX,\n      startY,\n      difX,\n      difY,\n      beziers,\n      prevCommand,\n      flag1,\n      flag2,\n      line = function line(sx, sy, ex, ey) {\n    difX = (ex - sx) / 3;\n    difY = (ey - sy) / 3;\n    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n  };\n\n  if (!d || !isNaN(a[0]) || isNaN(a[1])) {\n    console.log(errorMessage);\n    return path;\n  }\n\n  for (i = 0; i < elements; i++) {\n    prevCommand = command;\n\n    if (isNaN(a[i])) {\n      command = a[i].toUpperCase();\n      isRelative = command !== a[i]; //lower case means relative\n    } else {\n      //commands like \"C\" can be strung together without any new command characters between.\n      i--;\n    }\n\n    x = +a[i + 1];\n    y = +a[i + 2];\n\n    if (isRelative) {\n      x += relativeX;\n      y += relativeY;\n    }\n\n    if (!i) {\n      startX = x;\n      startY = y;\n    } // \"M\" (move)\n\n\n    if (command === \"M\") {\n      if (segment) {\n        if (segment.length < 8) {\n          //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n          path.length -= 1;\n        } else {\n          points += segment.length;\n        }\n      }\n\n      relativeX = startX = x;\n      relativeY = startY = y;\n      segment = [x, y];\n      path.push(segment);\n      i += 2;\n      command = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n      // \"C\" (cubic bezier)\n    } else if (command === \"C\") {\n      if (!segment) {\n        segment = [0, 0];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      } //note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\n\n      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);\n      i += 6; // \"S\" (continuation of cubic bezier)\n    } else if (command === \"S\") {\n      difX = relativeX;\n      difY = relativeY;\n\n      if (prevCommand === \"C\" || prevCommand === \"S\") {\n        difX += relativeX - segment[segment.length - 4];\n        difY += relativeY - segment[segment.length - 3];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);\n      i += 4; // \"Q\" (quadratic bezier)\n    } else if (command === \"Q\") {\n      difX = relativeX + (x - relativeX) * twoThirds;\n      difY = relativeY + (y - relativeY) * twoThirds;\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      relativeX += a[i + 3] * 1;\n      relativeY += a[i + 4] * 1;\n      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n      i += 4; // \"T\" (continuation of quadratic bezier)\n    } else if (command === \"T\") {\n      difX = relativeX - segment[segment.length - 4];\n      difY = relativeY - segment[segment.length - 3];\n      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);\n      i += 2; // \"H\" (horizontal line)\n    } else if (command === \"H\") {\n      line(relativeX, relativeY, relativeX = x, relativeY);\n      i += 1; // \"V\" (vertical line)\n    } else if (command === \"V\") {\n      //adjust values because the first (and only one) isn't x in this case, it's y.\n      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));\n      i += 1; // \"L\" (line) or \"Z\" (close)\n    } else if (command === \"L\" || command === \"Z\") {\n      if (command === \"Z\") {\n        x = startX;\n        y = startY;\n        segment.closed = true;\n      }\n\n      if (command === \"L\" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {\n        line(relativeX, relativeY, x, y);\n\n        if (command === \"L\") {\n          i += 2;\n        }\n      }\n\n      relativeX = x;\n      relativeY = y; // \"A\" (arc)\n    } else if (command === \"A\") {\n      flag1 = a[i + 4];\n      flag2 = a[i + 5];\n      difX = a[i + 6];\n      difY = a[i + 7];\n      j = 7;\n\n      if (flag1.length > 1) {\n        // for cases when the flags are merged, like \"a8 8 0 018 8\" (the 0 and 1 flags are WITH the x value of 8, but it could also be \"a8 8 0 01-8 8\" so it may include x or not)\n        if (flag1.length < 3) {\n          difY = difX;\n          difX = flag2;\n          j--;\n        } else {\n          difY = flag2;\n          difX = flag1.substr(2);\n          j -= 2;\n        }\n\n        flag2 = flag1.charAt(1);\n        flag1 = flag1.charAt(0);\n      }\n\n      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);\n      i += j;\n\n      if (beziers) {\n        for (j = 0; j < beziers.length; j++) {\n          segment.push(beziers[j]);\n        }\n      }\n\n      relativeX = segment[segment.length - 2];\n      relativeY = segment[segment.length - 1];\n    } else {\n      console.log(errorMessage);\n    }\n  }\n\n  i = segment.length;\n\n  if (i < 6) {\n    //in case there's odd SVG like a M0,0 command at the very end.\n    path.pop();\n    i = 0;\n  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {\n    segment.closed = true;\n  }\n\n  path.totalPoints = points + i;\n  return path;\n} //populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays\n\nexport function bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n  var x12 = (x1 + x2) / 2,\n      y12 = (y1 + y2) / 2,\n      x23 = (x2 + x3) / 2,\n      y23 = (y2 + y3) / 2,\n      x34 = (x3 + x4) / 2,\n      y34 = (y3 + y4) / 2,\n      x123 = (x12 + x23) / 2,\n      y123 = (y12 + y23) / 2,\n      x234 = (x23 + x34) / 2,\n      y234 = (y23 + y34) / 2,\n      x1234 = (x123 + x234) / 2,\n      y1234 = (y123 + y234) / 2,\n      dx = x4 - x1,\n      dy = y4 - y1,\n      d2 = _abs((x2 - x4) * dy - (y2 - y4) * dx),\n      d3 = _abs((x3 - x4) * dy - (y3 - y4) * dx),\n      length;\n\n  if (!points) {\n    points = [x1, y1, x4, y4];\n    index = 2;\n  }\n\n  points.splice(index || points.length - 2, 0, x1234, y1234);\n\n  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n    length = points.length;\n    bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n    bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 2 + (points.length - length));\n  }\n\n  return points;\n}\n/*\nfunction getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians\n\tvar dx1 = x1 - x0,\n\t\tdy1 = y1 - y0,\n\t\tdx2 = x2 - x1,\n\t\tdy2 = y2 - y1,\n\t\tdx3 = x2 - x0,\n\t\tdy3 = y2 - y0,\n\t\ta = dx1 * dx1 + dy1 * dy1,\n\t\tb = dx2 * dx2 + dy2 * dy2,\n\t\tc = dx3 * dx3 + dy3 * dy3;\n\treturn Math.acos( (a + b - c) / _sqrt(4 * a * b) );\n},\n*/\n//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)\n\nexport function flatPointsToSegment(points, curviness) {\n  if (curviness === void 0) {\n    curviness = 1;\n  }\n\n  var x = points[0],\n      y = 0,\n      segment = [x, y],\n      i = 2;\n\n  for (; i < points.length; i += 2) {\n    segment.push(x, y, points[i], y = (points[i] - x) * curviness / 2, x = points[i], -y);\n  }\n\n  return segment;\n} //points is an array of x/y points, like [x, y, x, y, x, y]\n\nexport function pointsToSegment(points, curviness) {\n  //points = simplifyPoints(points, tolerance);\n  _abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.\n\n  var l = points.length - 2,\n      x = +points[0],\n      y = +points[1],\n      nextX = +points[2],\n      nextY = +points[3],\n      segment = [x, y, x, y],\n      dx2 = nextX - x,\n      dy2 = nextY - y,\n      closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001,\n      prevX,\n      prevY,\n      i,\n      dx1,\n      dy1,\n      r1,\n      r2,\n      r3,\n      tl,\n      mx1,\n      mx2,\n      mxm,\n      my1,\n      my2,\n      mym;\n\n  if (closed) {\n    // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)\n    points.push(nextX, nextY);\n    nextX = x;\n    nextY = y;\n    x = points[l - 2];\n    y = points[l - 1];\n    points.unshift(x, y);\n    l += 4;\n  }\n\n  curviness = curviness || curviness === 0 ? +curviness : 1;\n\n  for (i = 2; i < l; i += 2) {\n    prevX = x;\n    prevY = y;\n    x = nextX;\n    y = nextY;\n    nextX = +points[i + 2];\n    nextY = +points[i + 3];\n\n    if (x === nextX && y === nextY) {\n      continue;\n    }\n\n    dx1 = dx2;\n    dy1 = dy2;\n    dx2 = nextX - x;\n    dy2 = nextY - y;\n    r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse\n\n    r2 = _sqrt(dx2 * dx2 + dy2 * dy2);\n    r3 = _sqrt(Math.pow(dx2 / r2 + dx1 / r1, 2) + Math.pow(dy2 / r2 + dy1 / r1, 2));\n    tl = (r1 + r2) * curviness * 0.25 / r3;\n    mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);\n    mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);\n    mxm = x - (mx1 + ((mx2 - mx1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n    my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);\n    my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);\n    mym = y - (my1 + ((my2 - my1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n\n    if (x !== prevX || y !== prevY) {\n      segment.push(_round(mx1 + mxm), // first control point\n      _round(my1 + mym), _round(x), // anchor\n      _round(y), _round(mx2 + mxm), // second control point\n      _round(my2 + mym));\n    }\n  }\n\n  x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : segment.length -= 2;\n\n  if (segment.length === 2) {\n    // only one point!\n    segment.push(x, y, x, y, x, y);\n  } else if (closed) {\n    segment.splice(0, 6);\n    segment.length = segment.length - 6;\n  }\n\n  return segment;\n} //returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2\n\nfunction pointToSegDist(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1,\n      dy = y2 - y1,\n      t;\n\n  if (dx || dy) {\n    t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n\n  return Math.pow(x - x1, 2) + Math.pow(y - y1, 2);\n}\n\nfunction simplifyStep(points, first, last, tolerance, simplified) {\n  var maxSqDist = tolerance,\n      firstX = points[first],\n      firstY = points[first + 1],\n      lastX = points[last],\n      lastY = points[last + 1],\n      index,\n      i,\n      d;\n\n  for (i = first + 2; i < last; i += 2) {\n    d = pointToSegDist(points[i], points[i + 1], firstX, firstY, lastX, lastY);\n\n    if (d > maxSqDist) {\n      index = i;\n      maxSqDist = d;\n    }\n  }\n\n  if (maxSqDist > tolerance) {\n    index - first > 2 && simplifyStep(points, first, index, tolerance, simplified);\n    simplified.push(points[index], points[index + 1]);\n    last - index > 2 && simplifyStep(points, index, last, tolerance, simplified);\n  }\n} //points is an array of x/y values like [x, y, x, y, x, y]\n\n\nexport function simplifyPoints(points, tolerance) {\n  var prevX = parseFloat(points[0]),\n      prevY = parseFloat(points[1]),\n      temp = [prevX, prevY],\n      l = points.length - 2,\n      i,\n      x,\n      y,\n      dx,\n      dy,\n      result,\n      last;\n  tolerance = Math.pow(tolerance || 1, 2);\n\n  for (i = 2; i < l; i += 2) {\n    x = parseFloat(points[i]);\n    y = parseFloat(points[i + 1]);\n    dx = prevX - x;\n    dy = prevY - y;\n\n    if (dx * dx + dy * dy > tolerance) {\n      temp.push(x, y);\n      prevX = x;\n      prevY = y;\n    }\n  }\n\n  temp.push(parseFloat(points[l]), parseFloat(points[l + 1]));\n  last = temp.length - 2;\n  result = [temp[0], temp[1]];\n  simplifyStep(temp, 0, last, tolerance, result);\n  result.push(temp[last], temp[last + 1]);\n  return result;\n}\n\nfunction getClosestProgressOnBezier(iterations, px, py, start, end, slices, x0, y0, x1, y1, x2, y2, x3, y3) {\n  var inc = (end - start) / slices,\n      best = 0,\n      t = start,\n      x,\n      y,\n      d,\n      dx,\n      dy,\n      inv;\n  _bestDistance = _largeNum;\n\n  while (t <= end) {\n    inv = 1 - t;\n    x = inv * inv * inv * x0 + 3 * inv * inv * t * x1 + 3 * inv * t * t * x2 + t * t * t * x3;\n    y = inv * inv * inv * y0 + 3 * inv * inv * t * y1 + 3 * inv * t * t * y2 + t * t * t * y3;\n    dx = x - px;\n    dy = y - py;\n    d = dx * dx + dy * dy;\n\n    if (d < _bestDistance) {\n      _bestDistance = d;\n      best = t;\n    }\n\n    t += inc;\n  }\n\n  return iterations > 1 ? getClosestProgressOnBezier(iterations - 1, px, py, Math.max(best - inc, 0), Math.min(best + inc, 1), slices, x0, y0, x1, y1, x2, y2, x3, y3) : best;\n}\n\nexport function getClosestData(rawPath, x, y, slices) {\n  //returns an object with the closest j, i, and t (j is the segment index, i is the index of the point in that segment, and t is the time/progress along that bezier)\n  var closest = {\n    j: 0,\n    i: 0,\n    t: 0\n  },\n      bestDistance = _largeNum,\n      i,\n      j,\n      t,\n      segment;\n\n  for (j = 0; j < rawPath.length; j++) {\n    segment = rawPath[j];\n\n    for (i = 0; i < segment.length; i += 6) {\n      t = getClosestProgressOnBezier(1, x, y, 0, 1, slices || 20, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n      if (bestDistance > _bestDistance) {\n        bestDistance = _bestDistance;\n        closest.j = j;\n        closest.i = i;\n        closest.t = t;\n      }\n    }\n  }\n\n  return closest;\n} //subdivide a Segment closest to a specific x,y coordinate\n\nexport function subdivideSegmentNear(x, y, segment, slices, iterations) {\n  var l = segment.length,\n      bestDistance = _largeNum,\n      bestT = 0,\n      bestSegmentIndex = 0,\n      t,\n      i;\n  slices = slices || 20;\n  iterations = iterations || 3;\n\n  for (i = 0; i < l; i += 6) {\n    t = getClosestProgressOnBezier(1, x, y, 0, 1, slices, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n    if (bestDistance > _bestDistance) {\n      bestDistance = _bestDistance;\n      bestT = t;\n      bestSegmentIndex = i;\n    }\n  }\n\n  t = getClosestProgressOnBezier(iterations, x, y, bestT - 0.05, bestT + 0.05, slices, segment[bestSegmentIndex], segment[bestSegmentIndex + 1], segment[bestSegmentIndex + 2], segment[bestSegmentIndex + 3], segment[bestSegmentIndex + 4], segment[bestSegmentIndex + 5], segment[bestSegmentIndex + 6], segment[bestSegmentIndex + 7]);\n  subdivideSegment(segment, bestSegmentIndex, t);\n  return bestSegmentIndex + 6;\n}\n/*\nTakes any of the following and converts it to an all Cubic Bezier SVG data string:\n- A <path> data string like \"M0,0 L2,4 v20,15 H100\"\n- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]\n- A Segment, like [x, y, x, y, x, y, x, y]\n\nNote: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13\n*/\n\nexport function rawPathToString(rawPath) {\n  if (_isNumber(rawPath[0])) {\n    //in case a segment is passed in instead\n    rawPath = [rawPath];\n  }\n\n  var result = \"\",\n      l = rawPath.length,\n      sl,\n      s,\n      i,\n      segment;\n\n  for (s = 0; s < l; s++) {\n    segment = rawPath[s];\n    result += \"M\" + _round(segment[0]) + \",\" + _round(segment[1]) + \" C\";\n    sl = segment.length;\n\n    for (i = 2; i < sl; i++) {\n      result += _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i]) + \" \";\n    }\n\n    if (segment.closed) {\n      result += \"z\";\n    }\n  }\n\n  return result;\n}\n/*\n// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.\nexport function cpCoordsToAngles(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tx, y, i;\n\tfor (i = 0; i < segment.length; i+=6) {\n\t\tx = segment[i+2] - segment[i];\n\t\ty = segment[i+3] - segment[i+1];\n\t\tresult[i+2] = Math.atan2(y, x);\n\t\tresult[i+3] = Math.sqrt(x * x + y * y);\n\t\tx = segment[i+6] - segment[i+4];\n\t\ty = segment[i+7] - segment[i+5];\n\t\tresult[i+4] = Math.atan2(y, x);\n\t\tresult[i+5] = Math.sqrt(x * x + y * y);\n\t}\n\treturn result;\n}\n\n// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.\nexport function cpAnglesToCoords(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tlength = segment.length,\n\t\trnd = 1000,\n\t\tangle, l, i, j;\n\tfor (i = 0; i < length; i+=6) {\n\t\tangle = segment[i+2];\n\t\tl = segment[i+3]; //length\n\t\tresult[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t\tangle = segment[i+4];\n\t\tl = segment[i+5]; //length\n\t\tresult[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t}\n\treturn result;\n}\n\n//adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\nexport function populateSmoothData(rawPath) {\n\tlet j = rawPath.length,\n\t\tsmooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;\n\twhile (--j > -1) {\n\t\tsegment = rawPath[j];\n\t\tisSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n\t\tsmoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n\t\tisSmooth.length = 4;\n\t\tl = segment.length - 2;\n\t\tfor (i = 6; i < l; i += 6) {\n\t\t\tx = segment[i] - segment[i - 2];\n\t\t\ty = segment[i + 1] - segment[i - 1];\n\t\t\tx2 = segment[i + 2] - segment[i];\n\t\t\ty2 = segment[i + 3] - segment[i + 1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tsmooth = (Math.abs(a - a2) < 0.09);\n\t\t\tif (smooth) {\n\t\t\t\tsmoothData[i - 2] = a;\n\t\t\t\tsmoothData[i + 2] = a2;\n\t\t\t\tsmoothData[i - 1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t}\n\t\t\tisSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n\t\t}\n\t\t//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\t\tif (segment[l] === segment[0] && segment[l+1] === segment[1]) {\n\t\t\tx = segment[0] - segment[l-2];\n\t\t\ty = segment[1] - segment[l-1];\n\t\t\tx2 = segment[2] - segment[0];\n\t\t\ty2 = segment[3] - segment[1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tif (Math.abs(a - a2) < 0.09) {\n\t\t\t\tsmoothData[l-2] = a;\n\t\t\t\tsmoothData[2] = a2;\n\t\t\t\tsmoothData[l-1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\tisSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n\t\t\t}\n\t\t}\n\t}\n\treturn rawPath;\n}\nexport function pointToScreen(svgElement, point) {\n\tif (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point\n\t\tlet rawPath = getRawPath(svgElement);\n\t\tpoint = svgElement.ownerSVGElement.createSVGPoint();\n\t\tpoint.x = rawPath[0][0];\n\t\tpoint.y = rawPath[0][1];\n\t}\n\treturn point.matrixTransform(svgElement.getScreenCTM());\n}\n\n*/","/*!\n * matrix 3.11.5\n * https://greensock.com\n *\n * Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _doc,\n    _win,\n    _docElement,\n    _body,\n    _divContainer,\n    _svgContainer,\n    _identityMatrix,\n    _gEl,\n    _transformProp = \"transform\",\n    _transformOriginProp = _transformProp + \"Origin\",\n    _hasOffsetBug,\n    _setDoc = function _setDoc(element) {\n  var doc = element.ownerDocument || element;\n\n  if (!(_transformProp in element.style) && \"msTransform\" in element.style) {\n    //to improve compatibility with old Microsoft browsers\n    _transformProp = \"msTransform\";\n    _transformOriginProp = _transformProp + \"Origin\";\n  }\n\n  while (doc.parentNode && (doc = doc.parentNode)) {}\n\n  _win = window;\n  _identityMatrix = new Matrix2D();\n\n  if (doc) {\n    _doc = doc;\n    _docElement = doc.documentElement;\n    _body = doc.body;\n    _gEl = _doc.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"); // prevent any existing CSS from transforming it\n\n    _gEl.style.transform = \"none\"; // now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon but it's 2020 and it's still not fixed.\n\n    var d1 = doc.createElement(\"div\"),\n        d2 = doc.createElement(\"div\");\n\n    _body.appendChild(d1);\n\n    d1.appendChild(d2);\n    d1.style.position = \"static\";\n    d1.style[_transformProp] = \"translate3d(0,0,1px)\";\n    _hasOffsetBug = d2.offsetParent !== d1;\n\n    _body.removeChild(d1);\n  }\n\n  return doc;\n},\n    _forceNonZeroScale = function _forceNonZeroScale(e) {\n  // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.\n  var a, cache;\n\n  while (e && e !== _body) {\n    cache = e._gsap;\n    cache && cache.uncache && cache.get(e, \"x\"); // force re-parsing of transforms if necessary\n\n    if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {\n      cache.scaleX = cache.scaleY = 1e-4;\n      cache.renderTransform(1, cache);\n      a ? a.push(cache) : a = [cache];\n    }\n\n    e = e.parentNode;\n  }\n\n  return a;\n},\n    // possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.\n// _forceDisplay = e => {\n// \tlet a = [],\n// \t\tparent;\n// \twhile (e && e !== _body) {\n// \t\tparent = e.parentNode;\n// \t\t(_win.getComputedStyle(e).display === \"none\" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = \"block\");\n// \t\tparent || _body.appendChild(e);\n// \t\te = parent;\n// \t}\n// \treturn a;\n// },\n// _revertDisplay = a => {\n// \tfor (let i = 0; i < a.length; i+=3) {\n// \t\ta[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty(\"display\");\n// \t\ta[i+2] || a[i].parentNode.removeChild(a[i]);\n// \t}\n// },\n_svgTemps = [],\n    //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.\n_divTemps = [],\n    _getDocScrollTop = function _getDocScrollTop() {\n  return _win.pageYOffset || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0;\n},\n    _getDocScrollLeft = function _getDocScrollLeft() {\n  return _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0;\n},\n    _svgOwner = function _svgOwner(element) {\n  return element.ownerSVGElement || ((element.tagName + \"\").toLowerCase() === \"svg\" ? element : null);\n},\n    _isFixed = function _isFixed(element) {\n  if (_win.getComputedStyle(element).position === \"fixed\") {\n    return true;\n  }\n\n  element = element.parentNode;\n\n  if (element && element.nodeType === 1) {\n    // avoid document fragments which will throw an error.\n    return _isFixed(element);\n  }\n},\n    _createSibling = function _createSibling(element, i) {\n  if (element.parentNode && (_doc || _setDoc(element))) {\n    var svg = _svgOwner(element),\n        ns = svg ? svg.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\" : \"http://www.w3.org/1999/xhtml\",\n        type = svg ? i ? \"rect\" : \"g\" : \"div\",\n        x = i !== 2 ? 0 : 100,\n        y = i === 3 ? 100 : 0,\n        css = \"position:absolute;display:block;pointer-events:none;margin:0;padding:0;\",\n        e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, \"http\"), type) : _doc.createElement(type);\n\n    if (i) {\n      if (!svg) {\n        if (!_divContainer) {\n          _divContainer = _createSibling(element);\n          _divContainer.style.cssText = css;\n        }\n\n        e.style.cssText = css + \"width:0.1px;height:0.1px;top:\" + y + \"px;left:\" + x + \"px\";\n\n        _divContainer.appendChild(e);\n      } else {\n        _svgContainer || (_svgContainer = _createSibling(element));\n        e.setAttribute(\"width\", 0.01);\n        e.setAttribute(\"height\", 0.01);\n        e.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\n        _svgContainer.appendChild(e);\n      }\n    }\n\n    return e;\n  }\n\n  throw \"Need document and parent.\";\n},\n    _consolidate = function _consolidate(m) {\n  // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n  var c = new Matrix2D(),\n      i = 0;\n\n  for (; i < m.numberOfItems; i++) {\n    c.multiply(m.getItem(i).matrix);\n  }\n\n  return c;\n},\n    _getCTM = function _getCTM(svg) {\n  var m = svg.getCTM(),\n      transform;\n\n  if (!m) {\n    // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.\n    transform = svg.style[_transformProp];\n    svg.style[_transformProp] = \"none\"; // a bug in Firefox causes css transforms to contaminate the getCTM()\n\n    svg.appendChild(_gEl);\n    m = _gEl.getCTM();\n    svg.removeChild(_gEl);\n    transform ? svg.style[_transformProp] = transform : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n  }\n\n  return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.\n},\n    _placeSiblings = function _placeSiblings(element, adjustGOffset) {\n  var svg = _svgOwner(element),\n      isRootSVG = element === svg,\n      siblings = svg ? _svgTemps : _divTemps,\n      parent = element.parentNode,\n      container,\n      m,\n      b,\n      x,\n      y,\n      cs;\n\n  if (element === _win) {\n    return element;\n  }\n\n  siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));\n  container = svg ? _svgContainer : _divContainer;\n\n  if (svg) {\n    if (isRootSVG) {\n      b = _getCTM(element);\n      x = -b.e / b.a;\n      y = -b.f / b.d;\n      m = _identityMatrix;\n    } else if (element.getBBox) {\n      b = element.getBBox();\n      m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.\n\n      m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n\n      x = m.a * b.x + m.c * b.y;\n      y = m.b * b.x + m.d * b.y;\n    } else {\n      // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.\n      m = new Matrix2D();\n      x = y = 0;\n    }\n\n    if (adjustGOffset && element.tagName.toLowerCase() === \"g\") {\n      x = y = 0;\n    }\n\n    (isRootSVG ? svg : parent).appendChild(container);\n    container.setAttribute(\"transform\", \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + (m.e + x) + \",\" + (m.f + y) + \")\");\n  } else {\n    x = y = 0;\n\n    if (_hasOffsetBug) {\n      // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.\n      m = element.offsetParent;\n      b = element;\n\n      while (b && (b = b.parentNode) && b !== m && b.parentNode) {\n        if ((_win.getComputedStyle(b)[_transformProp] + \"\").length > 4) {\n          x = b.offsetLeft;\n          y = b.offsetTop;\n          b = 0;\n        }\n      }\n    }\n\n    cs = _win.getComputedStyle(element);\n\n    if (cs.position !== \"absolute\" && cs.position !== \"fixed\") {\n      m = element.offsetParent;\n\n      while (parent && parent !== m) {\n        // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.\n        x += parent.scrollLeft || 0;\n        y += parent.scrollTop || 0;\n        parent = parent.parentNode;\n      }\n    }\n\n    b = container.style;\n    b.top = element.offsetTop - y + \"px\";\n    b.left = element.offsetLeft - x + \"px\";\n    b[_transformProp] = cs[_transformProp];\n    b[_transformOriginProp] = cs[_transformOriginProp]; // b.border = m.border;\n    // b.borderLeftStyle = m.borderLeftStyle;\n    // b.borderTopStyle = m.borderTopStyle;\n    // b.borderLeftWidth = m.borderLeftWidth;\n    // b.borderTopWidth = m.borderTopWidth;\n\n    b.position = cs.position === \"fixed\" ? \"fixed\" : \"absolute\";\n    element.parentNode.appendChild(container);\n  }\n\n  return container;\n},\n    _setMatrix = function _setMatrix(m, a, b, c, d, e, f) {\n  m.a = a;\n  m.b = b;\n  m.c = c;\n  m.d = d;\n  m.e = e;\n  m.f = f;\n  return m;\n};\n\nexport var Matrix2D = /*#__PURE__*/function () {\n  function Matrix2D(a, b, c, d, e, f) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (c === void 0) {\n      c = 0;\n    }\n\n    if (d === void 0) {\n      d = 1;\n    }\n\n    if (e === void 0) {\n      e = 0;\n    }\n\n    if (f === void 0) {\n      f = 0;\n    }\n\n    _setMatrix(this, a, b, c, d, e, f);\n  }\n\n  var _proto = Matrix2D.prototype;\n\n  _proto.inverse = function inverse() {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        determinant = a * d - b * c || 1e-10;\n    return _setMatrix(this, d / determinant, -b / determinant, -c / determinant, a / determinant, (c * f - d * e) / determinant, -(a * f - b * e) / determinant);\n  };\n\n  _proto.multiply = function multiply(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        a2 = matrix.a,\n        b2 = matrix.c,\n        c2 = matrix.b,\n        d2 = matrix.d,\n        e2 = matrix.e,\n        f2 = matrix.f;\n    return _setMatrix(this, a2 * a + c2 * c, a2 * b + c2 * d, b2 * a + d2 * c, b2 * b + d2 * d, e + e2 * a + f2 * c, f + e2 * b + f2 * d);\n  };\n\n  _proto.clone = function clone() {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);\n  };\n\n  _proto.equals = function equals(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    return a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f;\n  };\n\n  _proto.apply = function apply(point, decoratee) {\n    if (decoratee === void 0) {\n      decoratee = {};\n    }\n\n    var x = point.x,\n        y = point.y,\n        a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    decoratee.x = x * a + y * c + e || 0;\n    decoratee.y = x * b + y * d + f || 0;\n    return decoratee;\n  };\n\n  return Matrix2D;\n}(); // Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.\n// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.\n// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there\n// are transforms applied to ancestor elements.\n// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:\n//     tx = m.a * x + m.c * y + m.e\n//     ty = m.b * x + m.d * y + m.f\n\nexport function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) {\n  // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.\n  if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {\n    return new Matrix2D();\n  }\n\n  var zeroScales = _forceNonZeroScale(element),\n      svg = _svgOwner(element),\n      temps = svg ? _svgTemps : _divTemps,\n      container = _placeSiblings(element, adjustGOffset),\n      b1 = temps[0].getBoundingClientRect(),\n      b2 = temps[1].getBoundingClientRect(),\n      b3 = temps[2].getBoundingClientRect(),\n      parent = container.parentNode,\n      isFixed = !includeScrollInFixed && _isFixed(element),\n      m = new Matrix2D((b2.left - b1.left) / 100, (b2.top - b1.top) / 100, (b3.left - b1.left) / 100, (b3.top - b1.top) / 100, b1.left + (isFixed ? 0 : _getDocScrollLeft()), b1.top + (isFixed ? 0 : _getDocScrollTop()));\n\n  parent.removeChild(container);\n\n  if (zeroScales) {\n    b1 = zeroScales.length;\n\n    while (b1--) {\n      b2 = zeroScales[b1];\n      b2.scaleX = b2.scaleY = 0;\n      b2.renderTransform(1, b2);\n    }\n  }\n\n  return inverse ? m.inverse() : m;\n}\nexport { _getDocScrollTop, _getDocScrollLeft, _setDoc, _isFixed, _getCTM }; // export function getMatrix(element) {\n// \t_doc || _setDoc(element);\n// \tlet m = (_win.getComputedStyle(element)[_transformProp] + \"\").substr(7).match(/[-.]*\\d+[.e\\-+]*\\d*[e\\-\\+]*\\d*/g),\n// \t\tis2D = m && m.length === 6;\n// \treturn !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);\n// }","/*!\n * MotionPathPlugin 3.11.5\n * https://greensock.com\n *\n * @license Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath as _convertToPath } from \"./utils/paths.js\";\nimport { getGlobalMatrix } from \"./utils/matrix.js\";\n\nvar _xProps = \"x,translateX,left,marginLeft,xPercent\".split(\",\"),\n    _yProps = \"y,translateY,top,marginTop,yPercent\".split(\",\"),\n    _DEG2RAD = Math.PI / 180,\n    gsap,\n    PropTween,\n    _getUnit,\n    _toArray,\n    _getStyleSaver,\n    _reverting,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\n  //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.\n  var l = values.length,\n      si = mode === 2 ? 0 : mode,\n      i = 0,\n      v;\n\n  for (; i < l; i++) {\n    segment[si] = v = parseFloat(values[i][property]);\n    mode === 2 && (segment[si + 1] = 0);\n    si += 2;\n  }\n\n  return segment;\n},\n    _getPropNum = function _getPropNum(target, prop, unit) {\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\n},\n    _relativize = function _relativize(segment) {\n  var x = segment[0],\n      y = segment[1],\n      i;\n\n  for (i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n},\n    // feed in an array of quadratic bezier points like [{x: 0, y: 0}, ...] and it'll convert it to cubic bezier\n// _quadToCubic = points => {\n// \tlet cubic = [],\n// \t\tl = points.length - 1,\n// \t\ti = 1,\n// \t\ta, b, c;\n// \tfor (; i < l; i+=2) {\n// \t\ta = points[i-1];\n// \t\tb = points[i];\n// \t\tc = points[i+1];\n// \t\tcubic.push(a, {x: (2 * b.x + a.x) / 3, y: (2 * b.y + a.y) / 3}, {x: (2 * b.x + c.x) / 3, y: (2 * b.y + c.y) / 3});\n// \t}\n// \tcubic.push(points[l]);\n// \treturn cubic;\n// },\n_segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars, unitX, unitY) {\n  if (vars.type === \"cubic\") {\n    segment = [segment];\n  } else {\n    vars.fromCurrent !== false && segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);\n    vars.relative && _relativize(segment);\n    var pointFunc = y ? pointsToSegment : flatPointsToSegment;\n    segment = [pointFunc(segment, vars.curviness)];\n  }\n\n  segment = slicer(_align(segment, target, vars));\n\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", unitX);\n\n  y && _addDimensionalPropTween(plugin, target, y, segment, \"y\", unitY);\n  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\n},\n    _emptyFunc = function _emptyFunc(v) {\n  return v;\n},\n    _numExp = /[-+\\.]*\\d+\\.?(?:e-|e\\+)?\\d*/g,\n    _originToPoint = function _originToPoint(element, origin, parentMatrix) {\n  // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be \"auto\" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.\n  var m = getGlobalMatrix(element),\n      x = 0,\n      y = 0,\n      svg;\n\n  if ((element.tagName + \"\").toLowerCase() === \"svg\") {\n    svg = element.viewBox.baseVal;\n    svg.width || (svg = {\n      width: +element.getAttribute(\"width\"),\n      height: +element.getAttribute(\"height\")\n    });\n  } else {\n    svg = origin && element.getBBox && element.getBBox();\n  }\n\n  if (origin && origin !== \"auto\") {\n    x = origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;\n    y = origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;\n  }\n\n  return parentMatrix.apply(x || y ? m.apply({\n    x: x,\n    y: y\n  }) : {\n    x: m.e,\n    y: m.f\n  });\n},\n    _getAlignMatrix = function _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin) {\n  var parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),\n      m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),\n      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),\n      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),\n      x = _originToPoint2.x,\n      y = _originToPoint2.y,\n      p;\n\n  m.e = m.f = 0;\n\n  if (toOrigin === \"auto\" && toElement.getTotalLength && toElement.tagName.toLowerCase() === \"path\") {\n    p = toElement.getAttribute(\"d\").match(_numExp) || [];\n    p = m.apply({\n      x: +p[0],\n      y: +p[1]\n    });\n    x += p.x;\n    y += p.y;\n  } //if (p || (toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement)) {\n\n\n  if (p) {\n    p = m.apply(toElement.getBBox());\n    x -= p.x;\n    y -= p.y;\n  }\n\n  m.e = x - fromPoint.x;\n  m.f = y - fromPoint.y;\n  return m;\n},\n    _align = function _align(rawPath, target, _ref) {\n  var align = _ref.align,\n      matrix = _ref.matrix,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      alignOrigin = _ref.alignOrigin;\n\n  var x = rawPath[0][0],\n      y = rawPath[0][1],\n      curX = _getPropNum(target, \"x\"),\n      curY = _getPropNum(target, \"y\"),\n      alignTarget,\n      m,\n      p;\n\n  if (!rawPath || !rawPath.length) {\n    return getRawPath(\"M0,0L0,0\");\n  }\n\n  if (align) {\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\n      transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);\n    } else {\n      if (alignOrigin && alignOrigin[2] !== false) {\n        gsap.set(target, {\n          transformOrigin: alignOrigin[0] * 100 + \"% \" + alignOrigin[1] * 100 + \"%\"\n        });\n      } else {\n        alignOrigin = [_getPropNum(target, \"xPercent\") / -100, _getPropNum(target, \"yPercent\") / -100];\n      }\n\n      m = _getAlignMatrix(target, alignTarget, alignOrigin, \"auto\");\n      p = m.apply({\n        x: x,\n        y: y\n      });\n      transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));\n    }\n  }\n\n  if (matrix) {\n    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n  } else if (offsetX || offsetY) {\n    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\n  }\n\n  return rawPath;\n},\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\n  var cache = target._gsap,\n      harness = cache.harness,\n      alias = harness && harness.aliases && harness.aliases[property],\n      prop = alias && alias.indexOf(\",\") < 0 ? alias : property,\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\n  pt.path = rawPath;\n  pt.pp = pathProperty;\n\n  plugin._props.push(prop);\n},\n    _sliceModifier = function _sliceModifier(start, end) {\n  return function (rawPath) {\n    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;\n  };\n};\n\nexport var MotionPathPlugin = {\n  version: \"3.11.5\",\n  name: \"motionPath\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _getUnit = gsap.utils.getUnit;\n    _toArray = gsap.utils.toArray;\n    _getStyleSaver = gsap.core.getStyleSaver;\n\n    _reverting = gsap.core.reverting || function () {};\n\n    PropTween = propTween;\n  },\n  init: function init(target, vars, tween) {\n    if (!gsap) {\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\n      return false;\n    }\n\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\n      vars = {\n        path: vars\n      };\n    }\n\n    var rawPaths = [],\n        _vars = vars,\n        path = _vars.path,\n        autoRotate = _vars.autoRotate,\n        unitX = _vars.unitX,\n        unitY = _vars.unitY,\n        x = _vars.x,\n        y = _vars.y,\n        firstObj = path[0],\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\n        rawPath,\n        p;\n\n    this.rawPaths = rawPaths;\n    this.target = target;\n    this.tween = tween;\n    this.styles = _getStyleSaver && _getStyleSaver(target, \"transform\");\n\n    if (this.rotate = autoRotate || autoRotate === 0) {\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\n      this.rOffset = parseFloat(autoRotate) || 0;\n      this.radians = !!vars.useRadians;\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\n\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\n\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\n    }\n\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\n      for (p in firstObj) {\n        if (!x && ~_xProps.indexOf(p)) {\n          x = p;\n        } else if (!y && ~_yProps.indexOf(p)) {\n          y = p;\n        }\n      }\n\n      if (x && y) {\n        //correlated values\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));\n      } else {\n        x = y = 0;\n      }\n\n      for (p in firstObj) {\n        p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));\n      }\n    } else {\n      rawPath = slicer(_align(getRawPath(vars.path), target, vars));\n      cacheRawPathMeasurements(rawPath, vars.resolution);\n      rawPaths.push(rawPath);\n\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\n\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\n    }\n  },\n  render: function render(ratio, data) {\n    var rawPaths = data.rawPaths,\n        i = rawPaths.length,\n        pt = data._pt;\n\n    if (data.tween._time || !_reverting()) {\n      if (ratio > 1) {\n        ratio = 1;\n      } else if (ratio < 0) {\n        ratio = 0;\n      }\n\n      while (i--) {\n        getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\n      }\n\n      while (pt) {\n        pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\n        pt = pt._next;\n      }\n\n      data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\n    } else {\n      data.styles.revert();\n    }\n  },\n  getLength: function getLength(path) {\n    return cacheRawPathMeasurements(getRawPath(path)).totalLength;\n  },\n  sliceRawPath: sliceRawPath,\n  getRawPath: getRawPath,\n  pointsToSegment: pointsToSegment,\n  stringToRawPath: stringToRawPath,\n  rawPathToString: rawPathToString,\n  transformRawPath: transformRawPath,\n  getGlobalMatrix: getGlobalMatrix,\n  getPositionOnPath: getPositionOnPath,\n  cacheRawPathMeasurements: cacheRawPathMeasurements,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return _convertToPath(target, swap !== false);\n    });\n  },\n  convertCoordinates: function convertCoordinates(fromElement, toElement, point) {\n    var m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));\n    return point ? m.apply(point) : m;\n  },\n  getAlignMatrix: _getAlignMatrix,\n  getRelativePosition: function getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {\n    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);\n\n    return {\n      x: m.e,\n      y: m.f\n    };\n  },\n  arrayToRawPath: function arrayToRawPath(value, vars) {\n    vars = vars || {};\n\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\n\n    vars.relative && _relativize(segment);\n    return [vars.type === \"cubic\" ? segment : pointsToSegment(segment, vars.curviness)];\n  }\n};\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\nexport { MotionPathPlugin as default };","import { Container, createStyles } from '@mantine/core'\nimport React from 'react'\nimport { BREAKPOINT } from '../../constants/breakpoints'\nimport { COLORS, FONTS } from '../../constants/constants'\nimport { IndexContent } from '../../staticContent'\nimport JourneyIllustration from \"../../images/illustration.svg\"\nimport { useEffect } from 'react'\nimport { gsap } from 'gsap'\nimport { MotionPathPlugin } from 'gsap/MotionPathPlugin'\nimport { ScrollTrigger } from 'gsap/ScrollTrigger'\n\nconst useStyles = createStyles((theme) => ({\n  pageTitle: {\n    ...FONTS.TITLE,\n    fontSize: 52,\n    [theme.fn.smallerThan(BREAKPOINT.sm)]: {\n      fontSize: 32,\n    },\n  },\n  pageDescription: {\n    ...FONTS.BODY,\n    marginTop: 10,\n    lineHeight: 1.7,\n    [theme.fn.smallerThan(BREAKPOINT.sm)]: {\n      fontSize: 16,\n    },\n  },\n  whatwedoContainer: {\n    display: \"flex\",\n    minHeight: \"100vh\",\n    alignItems: 'center',\n    [theme.fn.smallerThan(BREAKPOINT.md)]: {\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      padding: '20px 0px'\n    },\n  },\n  whatwedoContentContainer: {\n    flex: 1.7,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    [theme.fn.smallerThan(BREAKPOINT.md)]: {\n      maxWidth: BREAKPOINT.sm,\n      textAlign: \"center\",\n    },\n  },\n  whatwedoContainerRoot: {\n    minHeight: \"100vh\",\n  },\n}))\n\nconst WhatWeDo = () => {\n  const { classes } = useStyles()\n\n  useEffect(() => {\n    gsap.registerPlugin(MotionPathPlugin, ScrollTrigger)\n    gsap.to('#story-point', {\n      duration: 1,\n      motionPath: {\n        path: '#story-path',\n        align: '#story-path',\n        alignOrigin: [0.5, 0.5],\n        autoRotate: false,\n      },\n      scrollTrigger: {\n        trigger: '#what-we-do',\n        start: 'top',\n        scrub: true,\n        pin: true,\n      },\n      ease: 'none'\n    })\n\n    const storyPoint = document.getElementById(\"story-point\");\n\n    gsap.timeline({ repeat: -1 })\n    .to(storyPoint, { duration: 1, scale: 2, ease: \"power2.out\" })\n    .to(storyPoint, { duration: 1, scale: 1, ease: \"power2.inOut\" });\n\n  }, [])\n\n  return (\n    <div className=\"panel\" \n      style={{ backgroundColor: COLORS.PRIMARY() }} \n      id=\"what-we-do\">\n        <Container size={1200} className={classes.whatwedoContainerRoot}>\n          <div className={classes.whatwedoContainer}>\n            <div className={classes.whatwedoContentContainer}>\n              <h1 className={classes.pageTitle} style={{color: '#FFF'}}>What We Do</h1>\n              <div id=\"paragraphs\">\n                <p id=\"para\" className={classes.pageDescription} style={{color: '#FFF'}}>\n                  {IndexContent.whatwedoDescription}\n                </p>\n              </div>\n            </div>\n            <div\n              style={{\n                flex: 2,\n                width: '100%',\n              }}\n            >\n              <JourneyIllustration />\n            </div>\n          </div>\n        </Container>\n      </div>\n  )\n}\n\nexport default WhatWeDo","var React = require('react');\n\nfunction Illustration (props) {\n    return React.createElement(\"svg\",props,[React.createElement(\"path\",{\"d\":\"M219.503 67.6369C220.297 64.5017 217.766 59.5132 212.275 60.3967C211.116 65.5791 216.35 68.6497 219.503 67.6369Z\",\"fill\":\"#37A980\",\"key\":0}),React.createElement(\"path\",{\"d\":\"M220.626 67.6369C219.833 64.5017 222.364 59.5132 227.855 60.3967C229.013 65.5791 223.78 68.6497 220.626 67.6369Z\",\"fill\":\"#37A980\",\"key\":1}),React.createElement(\"path\",{\"d\":\"M219.275 72.0157C219.275 69.8449 219.689 68.4338 217.646 67.7826L219.275 64.5264C219.485 65.3946 220.742 65.6439 220.903 64.852L222.531 67.7826C220.163 68.1082 220.577 69.8449 220.577 72.0157H219.275Z\",\"fill\":\"#37A980\",\"key\":2}),React.createElement(\"path\",{\"d\":\"M229.923 53.9607C230.717 50.8254 228.186 45.837 222.695 46.7204C221.536 51.9028 226.77 54.9734 229.923 53.9607Z\",\"fill\":\"#37A980\",\"key\":3}),React.createElement(\"path\",{\"d\":\"M231.046 53.9607C230.253 50.8254 232.784 45.837 238.275 46.7204C239.433 51.9028 234.2 54.9734 231.046 53.9607Z\",\"fill\":\"#37A980\",\"key\":4}),React.createElement(\"path\",{\"d\":\"M229.694 58.3394C229.694 56.1686 230.108 54.7576 228.065 54.1063L229.694 50.8501C229.904 51.7183 231.161 51.9676 231.322 51.1757L232.95 54.1063C230.582 54.4319 230.996 56.1686 230.996 58.3394H229.694Z\",\"fill\":\"#37A980\",\"key\":5}),React.createElement(\"path\",{\"d\":\"M220.155 40.9358C220.948 37.8005 218.417 32.8121 212.926 33.6955C211.768 38.8779 217.002 41.9485 220.155 40.9358Z\",\"fill\":\"#37A980\",\"key\":6}),React.createElement(\"path\",{\"d\":\"M221.278 40.9358C220.484 37.8005 223.015 32.8121 228.507 33.6955C229.665 38.8779 224.431 41.9485 221.278 40.9358Z\",\"fill\":\"#37A980\",\"key\":7}),React.createElement(\"path\",{\"d\":\"M219.925 45.3145C219.925 43.1437 220.339 41.7327 218.297 41.0814L219.925 37.8252C220.136 38.6934 221.392 38.9427 221.553 38.1508L223.181 41.0814C220.813 41.407 221.227 43.1437 221.227 45.3145H219.925Z\",\"fill\":\"#37A980\",\"key\":8}),React.createElement(\"path\",{\"d\":\"M238.668 67.6369C239.462 64.5017 236.931 59.5132 231.44 60.3967C230.281 65.5791 235.515 68.6497 238.668 67.6369Z\",\"fill\":\"#37A980\",\"key\":9}),React.createElement(\"path\",{\"d\":\"M239.791 67.6369C238.998 64.5017 241.529 59.5132 247.02 60.3967C248.179 65.5791 242.945 68.6497 239.791 67.6369Z\",\"fill\":\"#37A980\",\"key\":10}),React.createElement(\"path\",{\"d\":\"M238.439 72.0157C238.439 69.8449 238.853 68.4338 236.811 67.7826L238.439 64.5264C238.65 65.3946 239.906 65.6439 240.067 64.852L241.695 67.7826C239.327 68.1082 239.741 69.8449 239.741 72.0157H238.439Z\",\"fill\":\"#37A980\",\"key\":11}),React.createElement(\"path\",{\"d\":\"M249.088 53.9607C249.882 50.8254 247.351 45.837 241.86 46.7204C240.701 51.9028 245.935 54.9734 249.088 53.9607Z\",\"fill\":\"#37A980\",\"key\":12}),React.createElement(\"path\",{\"d\":\"M250.211 53.9607C249.418 50.8254 251.949 45.837 257.44 46.7204C258.598 51.9028 253.365 54.9734 250.211 53.9607Z\",\"fill\":\"#37A980\",\"key\":13}),React.createElement(\"path\",{\"d\":\"M248.86 58.3394C248.86 56.1686 249.274 54.7576 247.231 54.1063L248.86 50.8501C249.07 51.7183 250.327 51.9676 250.488 51.1757L252.116 54.1063C249.748 54.4319 250.162 56.1686 250.162 58.3394H248.86Z\",\"fill\":\"#37A980\",\"key\":14}),React.createElement(\"path\",{\"d\":\"M239.32 40.9358C240.114 37.8005 237.582 32.8121 232.091 33.6955C230.933 38.8779 236.167 41.9485 239.32 40.9358Z\",\"fill\":\"#37A980\",\"key\":15}),React.createElement(\"path\",{\"d\":\"M240.443 40.9358C239.649 37.8005 242.18 32.8121 247.672 33.6955C248.83 38.8779 243.596 41.9485 240.443 40.9358Z\",\"fill\":\"#37A980\",\"key\":16}),React.createElement(\"path\",{\"d\":\"M239.091 45.3145C239.091 43.1437 239.505 41.7327 237.463 41.0814L239.091 37.8252C239.302 38.6934 240.558 38.9427 240.719 38.1508L242.347 41.0814C239.979 41.407 240.393 43.1437 240.393 45.3145H239.091Z\",\"fill\":\"#37A980\",\"key\":17}),React.createElement(\"path\",{\"d\":\"M257.834 67.6369C258.627 64.5017 256.096 59.5132 250.605 60.3967C249.446 65.5791 254.68 68.6497 257.834 67.6369Z\",\"fill\":\"#37A980\",\"key\":18}),React.createElement(\"path\",{\"d\":\"M258.957 67.6369C258.163 64.5017 260.694 59.5132 266.185 60.3967C267.344 65.5791 262.11 68.6497 258.957 67.6369Z\",\"fill\":\"#37A980\",\"key\":19}),React.createElement(\"path\",{\"d\":\"M257.605 72.0157C257.605 69.8449 258.019 68.4338 255.977 67.7826L257.605 64.5264C257.816 65.3946 259.072 65.6439 259.233 64.852L260.861 67.7826C258.493 68.1082 258.907 69.8449 258.907 72.0157H257.605Z\",\"fill\":\"#37A980\",\"key\":20}),React.createElement(\"path\",{\"d\":\"M268.253 53.9607C269.047 50.8254 266.516 45.837 261.025 46.7204C259.866 51.9028 265.1 54.9734 268.253 53.9607Z\",\"fill\":\"#37A980\",\"key\":21}),React.createElement(\"path\",{\"d\":\"M269.376 53.9607C268.583 50.8254 271.114 45.837 276.605 46.7204C277.763 51.9028 272.53 54.9734 269.376 53.9607Z\",\"fill\":\"#37A980\",\"key\":22}),React.createElement(\"path\",{\"d\":\"M268.025 58.3394C268.025 56.1686 268.439 54.7576 266.396 54.1063L268.025 50.8501C268.235 51.7183 269.492 51.9676 269.653 51.1757L271.281 54.1063C268.913 54.4319 269.327 56.1686 269.327 58.3394H268.025Z\",\"fill\":\"#37A980\",\"key\":23}),React.createElement(\"path\",{\"d\":\"M258.485 40.9358C259.279 37.8005 256.747 32.8121 251.256 33.6955C250.098 38.8779 255.332 41.9485 258.485 40.9358Z\",\"fill\":\"#37A980\",\"key\":24}),React.createElement(\"path\",{\"d\":\"M259.608 40.9358C258.814 37.8005 261.345 32.8121 266.837 33.6955C267.995 38.8779 262.761 41.9485 259.608 40.9358Z\",\"fill\":\"#37A980\",\"key\":25}),React.createElement(\"path\",{\"d\":\"M258.256 45.3145C258.256 43.1437 258.67 41.7327 256.628 41.0814L258.256 37.8252C258.467 38.6934 259.723 38.9427 259.884 38.1508L261.512 41.0814C259.144 41.407 259.559 43.1437 259.559 45.3145H258.256Z\",\"fill\":\"#37A980\",\"key\":26}),React.createElement(\"path\",{\"d\":\"M277 67.6369C277.793 64.5017 275.262 59.5132 269.771 60.3967C268.612 65.5791 273.846 68.6497 277 67.6369Z\",\"fill\":\"#37A980\",\"key\":27}),React.createElement(\"path\",{\"d\":\"M278.123 67.6369C277.329 64.5017 279.86 59.5132 285.351 60.3967C286.51 65.5791 281.276 68.6497 278.123 67.6369Z\",\"fill\":\"#37A980\",\"key\":28}),React.createElement(\"path\",{\"d\":\"M276.771 72.0157C276.771 69.8449 277.185 68.4338 275.143 67.7826L276.771 64.5264C276.982 65.3946 278.238 65.6439 278.399 64.852L280.027 67.7826C277.659 68.1082 278.073 69.8449 278.073 72.0157H276.771Z\",\"fill\":\"#37A980\",\"key\":29}),React.createElement(\"path\",{\"d\":\"M287.419 53.9607C288.213 50.8254 285.682 45.837 280.191 46.7204C279.032 51.9028 284.266 54.9734 287.419 53.9607Z\",\"fill\":\"#37A980\",\"key\":30}),React.createElement(\"path\",{\"d\":\"M288.542 53.9607C287.749 50.8254 290.28 45.837 295.771 46.7204C296.929 51.9028 291.696 54.9734 288.542 53.9607Z\",\"fill\":\"#37A980\",\"key\":31}),React.createElement(\"path\",{\"d\":\"M287.19 58.3394C287.19 56.1686 287.604 54.7576 285.562 54.1063L287.19 50.8501C287.4 51.7183 288.657 51.9676 288.818 51.1757L290.446 54.1063C288.078 54.4319 288.492 56.1686 288.492 58.3394H287.19Z\",\"fill\":\"#37A980\",\"key\":32}),React.createElement(\"path\",{\"d\":\"M277.651 40.9358C278.445 37.8005 275.913 32.8121 270.422 33.6955C269.264 38.8779 274.498 41.9485 277.651 40.9358Z\",\"fill\":\"#37A980\",\"key\":33}),React.createElement(\"path\",{\"d\":\"M278.774 40.9358C277.98 37.8005 280.511 32.8121 286.003 33.6955C287.161 38.8779 281.927 41.9485 278.774 40.9358Z\",\"fill\":\"#37A980\",\"key\":34}),React.createElement(\"path\",{\"d\":\"M277.421 45.3145C277.421 43.1437 277.836 41.7327 275.793 41.0814L277.421 37.8252C277.632 38.6934 278.888 38.9427 279.049 38.1508L280.677 41.0814C278.309 41.407 278.724 43.1437 278.724 45.3145H277.421Z\",\"fill\":\"#37A980\",\"key\":35}),React.createElement(\"path\",{\"d\":\"M150.493 50.7065H138.14C138.14 52.986 139.375 57.5007 144.316 57.3243C149.257 57.1478 150.493 52.8389 150.493 50.7065Z\",\"fill\":\"white\",\"key\":36}),React.createElement(\"path\",{\"d\":\"M137.699 60.4126L138.581 65.9274L137.258 66.148L136.817 71.4422H133.508V62.8391L137.699 60.4126Z\",\"fill\":\"white\",\"key\":37}),React.createElement(\"path\",{\"d\":\"M150.934 60.4126L150.051 65.9274L151.375 66.148L151.816 71.4422H155.125V62.8391L150.934 60.4126Z\",\"fill\":\"white\",\"key\":38}),React.createElement(\"path\",{\"d\":\"M154.905 50.4861C145.199 48.5449 136.449 49.6773 133.287 50.4861V49.1626L138.581 46.9567L140.787 41.4419H147.626L149.831 46.9567L154.905 49.1626V50.4861Z\",\"fill\":\"#37A980\",\"key\":39}),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M126.89 51.3682V56.6624C126.89 58.0025 127.976 59.0889 129.316 59.0889H130.419V71.6627H131.743V59.0889H132.404C133.745 59.0889 134.831 58.0025 134.831 56.6624V51.3682H133.507V56.6624C133.507 57.196 133.128 57.641 132.625 57.7432V51.3682H131.301V57.7653H130.419V51.3682H129.096V57.7432C128.592 57.641 128.213 57.196 128.213 56.6624V51.3682H126.89Z\",\"fill\":\"white\",\"key\":40}),React.createElement(\"path\",{\"d\":\"M140.345 65.9277L139.904 59.7511C142.904 58.6923 147.037 59.31 148.728 59.7511L148.287 65.9277H140.345Z\",\"fill\":\"white\",\"key\":41}),React.createElement(\"circle\",{\"cx\":\"139.684\",\"cy\":\"67.692\",\"r\":\"0.661773\",\"fill\":\"white\",\"key\":42}),React.createElement(\"circle\",{\"cx\":\"148.949\",\"cy\":\"67.692\",\"r\":\"0.661773\",\"fill\":\"white\",\"key\":43}),React.createElement(\"path\",{\"d\":\"M189.317 50.7065H176.964C176.964 52.986 178.199 57.5007 183.14 57.3243C188.082 57.1478 189.317 52.8389 189.317 50.7065Z\",\"fill\":\"white\",\"key\":44}),React.createElement(\"path\",{\"d\":\"M176.523 60.4126L177.406 65.9274L176.082 66.148L175.641 71.4422H172.332V62.8391L176.523 60.4126Z\",\"fill\":\"white\",\"key\":45}),React.createElement(\"path\",{\"d\":\"M189.758 60.4126L188.876 65.9274L190.199 66.148L190.64 71.4422H193.949V62.8391L189.758 60.4126Z\",\"fill\":\"white\",\"key\":46}),React.createElement(\"path\",{\"d\":\"M193.729 50.4861C184.023 48.5449 175.273 49.6773 172.111 50.4861V49.1626L177.406 46.9567L179.611 41.4419H186.45L188.656 46.9567L193.729 49.1626V50.4861Z\",\"fill\":\"#37A980\",\"key\":47}),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M165.714 51.3682V56.6624C165.714 58.0025 166.8 59.0889 168.14 59.0889H169.243V71.6627H170.567V59.0889H171.229C172.569 59.0889 173.655 58.0025 173.655 56.6624V51.3682H172.332V56.6624C172.332 57.196 171.953 57.641 171.449 57.7432V51.3682H170.126V57.7653H169.243V51.3682H167.92V57.7432C167.416 57.641 167.037 57.196 167.037 56.6624V51.3682H165.714Z\",\"fill\":\"white\",\"key\":48}),React.createElement(\"path\",{\"d\":\"M179.17 65.9277L178.729 59.7511C181.729 58.6923 185.861 59.31 187.552 59.7511L187.111 65.9277H179.17Z\",\"fill\":\"white\",\"key\":49}),React.createElement(\"circle\",{\"cx\":\"178.508\",\"cy\":\"67.692\",\"r\":\"0.661773\",\"fill\":\"white\",\"key\":50}),React.createElement(\"circle\",{\"cx\":\"187.773\",\"cy\":\"67.692\",\"r\":\"0.661773\",\"fill\":\"white\",\"key\":51}),React.createElement(\"path\",{\"d\":\"M172.331 21H159.978C159.978 23.2794 161.213 27.7942 166.154 27.6177C171.095 27.4413 172.331 23.1324 172.331 21Z\",\"fill\":\"white\",\"key\":52}),React.createElement(\"path\",{\"d\":\"M159.536 30.7061L160.418 36.2208L159.095 36.4414L158.654 41.7356H155.345V33.1326L159.536 30.7061Z\",\"fill\":\"white\",\"key\":53}),React.createElement(\"path\",{\"d\":\"M172.772 30.7061L171.889 36.2208L173.213 36.4414L173.654 41.7356H176.963V33.1326L172.772 30.7061Z\",\"fill\":\"white\",\"key\":54}),React.createElement(\"path\",{\"d\":\"M176.743 20.7796C167.037 18.8384 158.287 19.9708 155.125 20.7796V19.456L160.419 17.2501L162.625 11.7354H169.463L171.669 17.2501L176.743 19.456V20.7796Z\",\"fill\":\"#37A980\",\"key\":55}),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M148.728 21.6621V26.9563C148.728 28.2964 149.814 29.3828 151.154 29.3828H152.257V41.9566H153.581V29.3828H154.242C155.582 29.3828 156.669 28.2964 156.669 26.9563V21.6621H155.345V26.9563C155.345 27.4899 154.966 27.935 154.463 28.0372V21.6621H153.139V28.0593H152.257V21.6621H150.933V28.0372C150.43 27.935 150.051 27.4899 150.051 26.9563V21.6621H148.728Z\",\"fill\":\"white\",\"key\":56}),React.createElement(\"path\",{\"d\":\"M162.183 36.2212L161.742 30.0446C164.742 28.9858 168.875 29.6034 170.566 30.0446L170.125 36.2212H162.183Z\",\"fill\":\"white\",\"key\":57}),React.createElement(\"circle\",{\"cx\":\"161.521\",\"cy\":\"37.9855\",\"r\":\"0.661773\",\"fill\":\"white\",\"key\":58}),React.createElement(\"circle\",{\"cx\":\"170.787\",\"cy\":\"37.9855\",\"r\":\"0.661773\",\"fill\":\"white\",\"key\":59}),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M65.2256 46.8564C70.4034 46.8564 80.2811 50.202 78.3693 63.5847H92.7078C92.7078 56.4154 95.0976 49.2461 107.046 51.6359V40.882H104.657V38.4922H101.072V40.882H95.0976V33.7127H98.6822V31.3229H92.7078V40.882H87.9283L85.5386 30.128H89.1232V27.7383H65.2256V46.8564ZM68.8103 31.3228V42.0767C72.7932 42.8733 81.237 47.0952 83.1488 57.6101H87.9283L81.9539 31.3228H68.8103Z\",\"fill\":\"white\",\"key\":60}),React.createElement(\"circle\",{\"cx\":\"103.461\",\"cy\":\"62.3896\",\"r\":\"9.55904\",\"fill\":\"#F4F4F4\",\"key\":61}),React.createElement(\"circle\",{\"cx\":\"65.2252\",\"cy\":\"60.0001\",\"r\":\"11.9488\",\"fill\":\"#F4F4F4\",\"key\":62}),React.createElement(\"path\",{\"id\":\"story-path\",\"d\":\"M1 75.7471H467.037C510.149 75.7471 545.097 110.696 545.097 153.807V153.807C545.097 196.919 510.149 231.867 467.037 231.867H66.9655C30.5338 231.867 1 261.401 1 297.833V297.833C1 334.265 30.5338 363.799 66.9656 363.799H273.049\",\"stroke\":\"#848B69\",\"strokeWidth\":\"1.06686\",\"key\":63}),React.createElement(\"g\",{\"opacity\":\"0.5\",\"key\":64},[React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M367.221 51.9858H375.86L379.187 58.6397V66.0985H367.221V51.9858ZM374.465 53.5955H368.884V58.103H375.645L374.465 53.5955Z\",\"fill\":\"white\",\"key\":0}),React.createElement(\"rect\",{\"x\":\"331.321\",\"y\":\"61.7524\",\"width\":\"34.8792\",\"height\":\"4.40015\",\"fill\":\"white\",\"key\":1}),React.createElement(\"rect\",{\"x\":\"327.458\",\"y\":\"43.4004\",\"width\":\"38.7428\",\"height\":\"17.3859\",\"fill\":\"white\",\"key\":2}),React.createElement(\"circle\",{\"cx\":\"369.42\",\"cy\":\"66.7965\",\"r\":\"5.04407\",\"fill\":\"#525937\",\"key\":3}),React.createElement(\"circle\",{\"cx\":\"369.474\",\"cy\":\"67.0646\",\"r\":\"4.02452\",\"fill\":\"white\",\"key\":4}),React.createElement(\"circle\",{\"cx\":\"350.318\",\"cy\":\"66.7965\",\"r\":\"5.04407\",\"fill\":\"#525937\",\"key\":5}),React.createElement(\"circle\",{\"cx\":\"350.371\",\"cy\":\"67.0646\",\"r\":\"4.02452\",\"fill\":\"white\",\"key\":6}),React.createElement(\"circle\",{\"cx\":\"339.585\",\"cy\":\"66.7965\",\"r\":\"5.04407\",\"fill\":\"#525937\",\"key\":7}),React.createElement(\"circle\",{\"cx\":\"339.639\",\"cy\":\"67.0646\",\"r\":\"4.02452\",\"fill\":\"white\",\"key\":8})]),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M114.708 340.45H123.419L126.774 347.16V354.681H114.708V340.45ZM122.013 342.073H116.385V346.619H123.203L122.013 342.073Z\",\"fill\":\"white\",\"key\":65}),React.createElement(\"rect\",{\"x\":\"78.5098\",\"y\":\"350.298\",\"width\":\"35.1706\",\"height\":\"4.43691\",\"fill\":\"white\",\"key\":66}),React.createElement(\"rect\",{\"x\":\"74.6133\",\"y\":\"331.793\",\"width\":\"39.0664\",\"height\":\"17.5312\",\"fill\":\"white\",\"key\":67}),React.createElement(\"circle\",{\"cx\":\"116.926\",\"cy\":\"355.384\",\"r\":\"5.08621\",\"fill\":\"#525937\",\"key\":68}),React.createElement(\"circle\",{\"cx\":\"116.98\",\"cy\":\"355.654\",\"r\":\"4.05815\",\"fill\":\"white\",\"key\":69}),React.createElement(\"circle\",{\"cx\":\"97.6634\",\"cy\":\"355.384\",\"r\":\"5.08621\",\"fill\":\"#525937\",\"key\":70}),React.createElement(\"circle\",{\"cx\":\"97.7173\",\"cy\":\"355.654\",\"r\":\"4.05815\",\"fill\":\"white\",\"key\":71}),React.createElement(\"circle\",{\"cx\":\"86.8421\",\"cy\":\"355.384\",\"r\":\"5.08621\",\"fill\":\"#525937\",\"key\":72}),React.createElement(\"circle\",{\"cx\":\"86.896\",\"cy\":\"355.654\",\"r\":\"4.05815\",\"fill\":\"white\",\"key\":73}),React.createElement(\"path\",{\"d\":\"M92.8256 348.101C93.8513 344.049 90.58 337.602 83.483 338.744C81.9859 345.442 88.7503 349.41 92.8256 348.101Z\",\"fill\":\"#37A980\",\"key\":74}),React.createElement(\"path\",{\"d\":\"M94.1685 348.101C93.1428 344.049 96.4141 337.602 103.511 338.744C105.008 345.442 98.2438 349.41 94.1685 348.101Z\",\"fill\":\"#37A980\",\"key\":75}),React.createElement(\"g\",{\"opacity\":\"0.5\",\"key\":76},[React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M432.847 51.9858H441.486L444.813 58.6397V66.0985H432.847V51.9858ZM440.091 53.5955H434.51V58.103H441.271L440.091 53.5955Z\",\"fill\":\"white\",\"key\":0}),React.createElement(\"rect\",{\"x\":\"396.947\",\"y\":\"61.7524\",\"width\":\"34.8792\",\"height\":\"4.40015\",\"fill\":\"white\",\"key\":1}),React.createElement(\"rect\",{\"x\":\"393.084\",\"y\":\"43.4004\",\"width\":\"38.7428\",\"height\":\"17.3859\",\"fill\":\"white\",\"key\":2}),React.createElement(\"circle\",{\"cx\":\"435.046\",\"cy\":\"66.7965\",\"r\":\"5.04407\",\"fill\":\"#525937\",\"key\":3}),React.createElement(\"circle\",{\"cx\":\"435.1\",\"cy\":\"67.0646\",\"r\":\"4.02452\",\"fill\":\"white\",\"key\":4}),React.createElement(\"circle\",{\"cx\":\"415.943\",\"cy\":\"66.7965\",\"r\":\"5.04407\",\"fill\":\"#525937\",\"key\":5}),React.createElement(\"circle\",{\"cx\":\"415.997\",\"cy\":\"67.0646\",\"r\":\"4.02452\",\"fill\":\"white\",\"key\":6}),React.createElement(\"circle\",{\"cx\":\"405.211\",\"cy\":\"66.7965\",\"r\":\"5.04407\",\"fill\":\"#525937\",\"key\":7}),React.createElement(\"circle\",{\"cx\":\"405.265\",\"cy\":\"67.0646\",\"r\":\"4.02452\",\"fill\":\"white\",\"key\":8})]),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M42.5449 311.636L46.5494 319.372L42.1329 325.436L35.4536 328.893L29.907 318.177L42.5449 311.636ZM44.4612 318.869L41.8745 313.872L37.838 315.961L40.972 322.016L44.4612 318.869Z\",\"fill\":\"white\",\"key\":77}),React.createElement(\"rect\",{\"x\":\"17.1592\",\"y\":\"284.015\",\"width\":\"35.1706\",\"height\":\"4.43691\",\"transform\":\"rotate(62.6335 17.1592 284.015)\",\"fill\":\"white\",\"key\":78}),React.createElement(\"rect\",{\"x\":\"31.8027\",\"y\":\"272.049\",\"width\":\"39.0664\",\"height\":\"17.5312\",\"transform\":\"rotate(62.6335 31.8027 272.049)\",\"fill\":\"white\",\"key\":79}),React.createElement(\"circle\",{\"cx\":\"30.3015\",\"cy\":\"320.471\",\"r\":\"5.08621\",\"transform\":\"rotate(62.6335 30.3015 320.471)\",\"fill\":\"#525937\",\"key\":80}),React.createElement(\"circle\",{\"cx\":\"30.0867\",\"cy\":\"320.643\",\"r\":\"4.05815\",\"transform\":\"rotate(62.6335 30.0867 320.643)\",\"fill\":\"white\",\"key\":81}),React.createElement(\"circle\",{\"cx\":\"21.447\",\"cy\":\"303.364\",\"r\":\"5.08621\",\"transform\":\"rotate(62.6335 21.447 303.364)\",\"fill\":\"#525937\",\"key\":82}),React.createElement(\"circle\",{\"cx\":\"21.2322\",\"cy\":\"303.536\",\"r\":\"4.05815\",\"transform\":\"rotate(62.6335 21.2322 303.536)\",\"fill\":\"white\",\"key\":83}),React.createElement(\"circle\",{\"cx\":\"16.4724\",\"cy\":\"293.753\",\"r\":\"5.08621\",\"transform\":\"rotate(62.6335 16.4724 293.753)\",\"fill\":\"#525937\",\"key\":84}),React.createElement(\"circle\",{\"cx\":\"16.2576\",\"cy\":\"293.926\",\"r\":\"4.05815\",\"transform\":\"rotate(62.6335 16.2576 293.926)\",\"fill\":\"white\",\"key\":85}),React.createElement(\"path\",{\"d\":\"M25.691 295.72C29.7612 294.768 33.9831 288.899 29.7067 283.121C23.0702 284.87 22.6553 292.702 25.691 295.72Z\",\"fill\":\"#37A980\",\"key\":86}),React.createElement(\"path\",{\"d\":\"M26.3088 296.912C29.4359 294.139 36.6654 294.08 38.9137 300.908C33.6536 305.316 27.0197 301.133 26.3088 296.912Z\",\"fill\":\"#37A980\",\"key\":87}),React.createElement(\"path\",{\"d\":\"M170.66 192.938C167.595 202.658 165.807 220.782 165.296 228.629H223.533C223.533 228.629 218.169 183.826 213.571 171.676C209.893 161.956 211.528 149.401 212.805 144.339H176.79C179.855 161.045 174.491 180.789 170.66 192.938Z\",\"fill\":\"#37A980\",\"key\":88}),React.createElement(\"path\",{\"d\":\"M176.023 154.301H202.843\",\"stroke\":\"#525937\",\"strokeWidth\":\"2.13372\",\"key\":89}),React.createElement(\"path\",{\"d\":\"M197.479 161.197H176.023\",\"stroke\":\"#525937\",\"strokeWidth\":\"2.13372\",\"key\":90}),React.createElement(\"path\",{\"d\":\"M203.609 183.07L244.988 164.262L286.367 183.07V228.629H203.609V183.07Z\",\"fill\":\"white\",\"key\":91}),React.createElement(\"path\",{\"d\":\"M211.899 205.641H242.55V228.629H211.899V205.641Z\",\"fill\":\"#525937\",\"key\":92}),React.createElement(\"path\",{\"d\":\"M259.408 158.132H271.669V181.12H259.408V158.132Z\",\"fill\":\"white\",\"key\":93}),React.createElement(\"rect\",{\"x\":\"219.562\",\"y\":\"185.717\",\"width\":\"9.19526\",\"height\":\"9.19526\",\"fill\":\"#525937\",\"key\":94}),React.createElement(\"rect\",{\"x\":\"241.018\",\"y\":\"185.717\",\"width\":\"9.19526\",\"height\":\"9.19526\",\"fill\":\"#525937\",\"key\":95}),React.createElement(\"rect\",{\"x\":\"262.474\",\"y\":\"185.717\",\"width\":\"9.19526\",\"height\":\"9.19526\",\"fill\":\"#525937\",\"key\":96}),React.createElement(\"path\",{\"d\":\"M272.048 207.173L298.867 194.913L325.687 207.173V228.629H272.048V207.173Z\",\"fill\":\"#37A980\",\"key\":97}),React.createElement(\"path\",{\"d\":\"M290.438 219.852L298.866 214.836L307.295 219.852V228.629H290.438V219.852Z\",\"fill\":\"white\",\"key\":98}),React.createElement(\"rect\",{\"x\":\"311.894\",\"y\":\"210.238\",\"width\":\"6.13017\",\"height\":\"6.13017\",\"fill\":\"white\",\"key\":99}),React.createElement(\"rect\",{\"x\":\"279.71\",\"y\":\"210.238\",\"width\":\"7.66272\",\"height\":\"7.66272\",\"fill\":\"white\",\"key\":100}),React.createElement(\"path\",{\"d\":\"M185.219 138.975V133.611M185.219 128.248V125.619C185.219 123.262 187.129 121.351 189.486 121.351H205.908M212.038 121.351H217.402\",\"stroke\":\"white\",\"strokeWidth\":\"1.06686\",\"key\":101}),React.createElement(\"path\",{\"d\":\"M195.946 139.741V132.515C195.946 130.158 197.857 128.247 200.214 128.247H219.701C221.817 128.247 223.532 126.532 223.532 124.416V124.416C223.532 122.3 225.247 120.584 227.363 120.584H235.026M241.923 120.584H250.352\",\"stroke\":\"white\",\"strokeWidth\":\"1.06686\",\"key\":102}),React.createElement(\"path\",{\"d\":\"M205.908 141.274V138.545C205.908 136.227 207.757 134.333 210.074 134.278L234.307 133.701C236.411 133.651 238.091 131.931 238.091 129.825V129.825C238.091 127.684 239.827 125.949 241.968 125.949H252.65M264.911 125.949H272.573M200.544 115.221H218.168\",\"stroke\":\"white\",\"strokeWidth\":\"1.06686\",\"key\":103}),React.createElement(\"g\",{\"opacity\":\"0.5\",\"key\":104},[React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M431.274 208.16H422.563L419.208 214.869V222.39H431.274V208.16ZM423.97 209.783H429.597V214.328H422.779L423.97 209.783Z\",\"fill\":\"white\",\"key\":0}),React.createElement(\"rect\",{\"width\":\"35.1706\",\"height\":\"4.43691\",\"transform\":\"matrix(-1 0 0 1 467.473 218.008)\",\"fill\":\"white\",\"key\":1}),React.createElement(\"rect\",{\"width\":\"39.0664\",\"height\":\"17.5312\",\"transform\":\"matrix(-1 0 0 1 471.369 199.502)\",\"fill\":\"white\",\"key\":2}),React.createElement(\"circle\",{\"cx\":\"5.08621\",\"cy\":\"5.08621\",\"r\":\"5.08621\",\"transform\":\"matrix(-1 0 0 1 434.143 218.008)\",\"fill\":\"#525937\",\"key\":3}),React.createElement(\"circle\",{\"cx\":\"4.05815\",\"cy\":\"4.05815\",\"r\":\"4.05815\",\"transform\":\"matrix(-1 0 0 1 433.061 219.306)\",\"fill\":\"white\",\"key\":4}),React.createElement(\"circle\",{\"cx\":\"5.08621\",\"cy\":\"5.08621\",\"r\":\"5.08621\",\"transform\":\"matrix(-1 0 0 1 453.405 218.008)\",\"fill\":\"#525937\",\"key\":5}),React.createElement(\"circle\",{\"cx\":\"4.05815\",\"cy\":\"4.05815\",\"r\":\"4.05815\",\"transform\":\"matrix(-1 0 0 1 452.323 219.306)\",\"fill\":\"white\",\"key\":6}),React.createElement(\"circle\",{\"cx\":\"5.08621\",\"cy\":\"5.08621\",\"r\":\"5.08621\",\"transform\":\"matrix(-1 0 0 1 464.227 218.008)\",\"fill\":\"#525937\",\"key\":7}),React.createElement(\"circle\",{\"cx\":\"4.05815\",\"cy\":\"4.05815\",\"r\":\"4.05815\",\"transform\":\"matrix(-1 0 0 1 463.145 219.306)\",\"fill\":\"white\",\"key\":8})]),React.createElement(\"g\",{\"opacity\":\"0.5\",\"key\":105},[React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M368.33 208.16H359.619L356.264 214.869V222.39H368.33V208.16ZM361.025 209.783H366.653V214.328H359.835L361.025 209.783Z\",\"fill\":\"white\",\"key\":0}),React.createElement(\"rect\",{\"width\":\"35.1706\",\"height\":\"4.43691\",\"transform\":\"matrix(-1 0 0 1 404.528 218.008)\",\"fill\":\"white\",\"key\":1}),React.createElement(\"rect\",{\"width\":\"39.0664\",\"height\":\"17.5312\",\"transform\":\"matrix(-1 0 0 1 408.425 199.502)\",\"fill\":\"white\",\"key\":2}),React.createElement(\"circle\",{\"cx\":\"5.08621\",\"cy\":\"5.08621\",\"r\":\"5.08621\",\"transform\":\"matrix(-1 0 0 1 371.198 218.008)\",\"fill\":\"#525937\",\"key\":3}),React.createElement(\"circle\",{\"cx\":\"4.05815\",\"cy\":\"4.05815\",\"r\":\"4.05815\",\"transform\":\"matrix(-1 0 0 1 370.116 219.306)\",\"fill\":\"white\",\"key\":4}),React.createElement(\"circle\",{\"cx\":\"5.08621\",\"cy\":\"5.08621\",\"r\":\"5.08621\",\"transform\":\"matrix(-1 0 0 1 390.461 218.008)\",\"fill\":\"#525937\",\"key\":5}),React.createElement(\"circle\",{\"cx\":\"4.05815\",\"cy\":\"4.05815\",\"r\":\"4.05815\",\"transform\":\"matrix(-1 0 0 1 389.379 219.306)\",\"fill\":\"white\",\"key\":6}),React.createElement(\"circle\",{\"cx\":\"5.08621\",\"cy\":\"5.08621\",\"r\":\"5.08621\",\"transform\":\"matrix(-1 0 0 1 401.282 218.008)\",\"fill\":\"#525937\",\"key\":7}),React.createElement(\"circle\",{\"cx\":\"4.05815\",\"cy\":\"4.05815\",\"r\":\"4.05815\",\"transform\":\"matrix(-1 0 0 1 400.2 219.306)\",\"fill\":\"white\",\"key\":8})]),React.createElement(\"rect\",{\"x\":\"125.936\",\"y\":\"206.325\",\"width\":\"24.4254\",\"height\":\"21.9829\",\"rx\":\"2.44254\",\"fill\":\"#DDE8B1\",\"key\":106}),React.createElement(\"path\",{\"d\":\"M139.071 225.719C138.471 223.348 140.385 219.575 144.538 220.244C145.414 224.163 141.456 226.485 139.071 225.719Z\",\"fill\":\"#37A980\",\"key\":107}),React.createElement(\"path\",{\"d\":\"M138.041 225.719C138.641 223.348 136.727 219.575 132.574 220.244C131.698 224.163 135.656 226.485 138.041 225.719Z\",\"fill\":\"#37A980\",\"key\":108}),React.createElement(\"path\",{\"d\":\"M142.219 206.325H147.104V212.838L144.661 212.024L142.219 212.838V206.325Z\",\"fill\":\"#525937\",\"key\":109}),React.createElement(\"rect\",{\"x\":\"111.28\",\"y\":\"181.899\",\"width\":\"24.4254\",\"height\":\"21.9829\",\"rx\":\"2.44254\",\"fill\":\"#DDE8B1\",\"key\":110}),React.createElement(\"path\",{\"d\":\"M124.416 201.294C123.815 198.923 125.73 195.15 129.883 195.818C130.759 199.738 126.8 202.06 124.416 201.294Z\",\"fill\":\"#37A980\",\"key\":111}),React.createElement(\"path\",{\"d\":\"M123.385 201.294C123.986 198.923 122.071 195.15 117.918 195.818C117.042 199.738 121.001 202.06 123.385 201.294Z\",\"fill\":\"#37A980\",\"key\":112}),React.createElement(\"path\",{\"d\":\"M127.563 181.899H132.449V188.413L130.006 187.599L127.563 188.413V181.899Z\",\"fill\":\"#525937\",\"key\":113}),React.createElement(\"rect\",{\"x\":\"74.6416\",\"y\":\"166.43\",\"width\":\"24.4254\",\"height\":\"21.9829\",\"rx\":\"2.44254\",\"fill\":\"#DDE8B1\",\"key\":114}),React.createElement(\"path\",{\"d\":\"M87.7768 185.824C87.1766 183.453 89.0909 179.68 93.2438 180.349C94.1199 184.268 90.1616 186.59 87.7768 185.824Z\",\"fill\":\"#37A980\",\"key\":115}),React.createElement(\"path\",{\"d\":\"M86.7466 185.824C87.3468 183.453 85.4326 179.68 81.2796 180.349C80.4036 184.268 84.3619 186.59 86.7466 185.824Z\",\"fill\":\"#37A980\",\"key\":116}),React.createElement(\"path\",{\"d\":\"M90.9248 166.43H95.8099V172.943L93.3673 172.129L90.9248 172.943V166.43Z\",\"fill\":\"#525937\",\"key\":117}),React.createElement(\"rect\",{\"x\":\"97.4385\",\"y\":\"206.325\",\"width\":\"24.4254\",\"height\":\"21.9829\",\"rx\":\"2.44254\",\"fill\":\"#DDE8B1\",\"key\":118}),React.createElement(\"path\",{\"d\":\"M110.574 225.719C109.973 223.348 111.888 219.575 116.041 220.244C116.917 224.163 112.958 226.485 110.574 225.719Z\",\"fill\":\"#37A980\",\"key\":119}),React.createElement(\"path\",{\"d\":\"M109.543 225.719C110.144 223.348 108.229 219.575 104.076 220.244C103.2 224.163 107.159 226.485 109.543 225.719Z\",\"fill\":\"#37A980\",\"key\":120}),React.createElement(\"path\",{\"d\":\"M113.723 206.325H118.608V212.838L116.165 212.024L113.723 212.838V206.325Z\",\"fill\":\"#525937\",\"key\":121}),React.createElement(\"path\",{\"d\":\"M510.424 328.592H546.697L525.894 360.598L316.256 361.665L311.455 328.592H381.334L390.936 337.661H501.356L510.424 328.592Z\",\"fill\":\"white\",\"key\":122}),React.createElement(\"path\",{\"d\":\"M414.407 283.289C417.821 278.595 423.298 280.622 425.609 282.223C422.195 277.102 417.075 277.955 414.941 279.022C410.673 275.608 406.406 278.311 404.806 280.089C410.78 278.382 413.696 281.511 414.407 283.289Z\",\"fill\":\"white\",\"key\":123}),React.createElement(\"path\",{\"d\":\"M428.277 272.62C431.69 267.926 437.167 269.953 439.479 271.554C436.065 266.433 430.944 267.286 428.81 268.353C424.543 264.939 420.275 267.642 418.675 269.42C424.649 267.713 427.565 270.842 428.277 272.62Z\",\"fill\":\"white\",\"key\":124}),React.createElement(\"rect\",{\"width\":\"50.1423\",\"height\":\"18.1366\",\"transform\":\"matrix(-1 0 0 1 498.155 315.79)\",\"fill\":\"#37A980\",\"key\":125}),React.createElement(\"rect\",{\"width\":\"50.1423\",\"height\":\"18.1366\",\"transform\":\"matrix(-1 0 0 1 498.155 294.453)\",\"fill\":\"#37A980\",\"key\":126}),React.createElement(\"rect\",{\"width\":\"50.1423\",\"height\":\"18.1366\",\"transform\":\"matrix(-1 0 0 1 444.812 294.453)\",\"fill\":\"#37A980\",\"key\":127}),React.createElement(\"path\",{\"d\":\"M433.825 310.096C434.478 307.517 432.396 303.413 427.878 304.14C426.925 308.403 431.231 310.929 433.825 310.096Z\",\"fill\":\"white\",\"key\":128}),React.createElement(\"path\",{\"d\":\"M434.739 310.096C434.086 307.517 436.169 303.413 440.686 304.14C441.639 308.403 437.333 310.929 434.739 310.096Z\",\"fill\":\"white\",\"key\":129}),React.createElement(\"path\",{\"d\":\"M488.234 310.096C488.887 307.517 486.805 303.413 482.288 304.14C481.335 308.403 485.64 310.929 488.234 310.096Z\",\"fill\":\"white\",\"key\":130}),React.createElement(\"path\",{\"d\":\"M489.148 310.096C488.495 307.517 490.578 303.413 495.095 304.14C496.048 308.403 491.742 310.929 489.148 310.096Z\",\"fill\":\"white\",\"key\":131}),React.createElement(\"rect\",{\"width\":\"50.1423\",\"height\":\"18.1366\",\"transform\":\"matrix(-1 0 0 1 444.812 315.79)\",\"fill\":\"#37A980\",\"key\":132}),React.createElement(\"path\",{\"d\":\"M433.825 331.433C434.478 328.854 432.396 324.75 427.878 325.477C426.925 329.74 431.231 332.266 433.825 331.433Z\",\"fill\":\"white\",\"key\":133}),React.createElement(\"path\",{\"d\":\"M434.739 331.433C434.086 328.854 436.169 324.75 440.686 325.477C441.639 329.74 437.333 332.266 434.739 331.433Z\",\"fill\":\"white\",\"key\":134}),React.createElement(\"path\",{\"d\":\"M488.234 331.433C488.887 328.854 486.805 324.75 482.288 325.477C481.335 329.74 485.64 332.266 488.234 331.433Z\",\"fill\":\"white\",\"key\":135}),React.createElement(\"path\",{\"d\":\"M489.148 331.433C488.495 328.854 490.578 324.75 495.095 325.477C496.048 329.74 491.742 332.266 489.148 331.433Z\",\"fill\":\"white\",\"key\":136}),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"clipRule\":\"evenodd\",\"d\":\"M338.127 254.979H345.595V263.514H367.999V268.848H363.731L360.531 283.784L369.066 283.784H373.333V289.118H369.066V325.392H329.592V289.118H325.324V283.784H329.592L333.859 283.784V268.848H329.592V263.514H338.127V254.979ZM339.194 273.116H358.397L356.339 279.517H339.194V273.116ZM362.664 294.453H356.263V300.854H362.664V294.453ZM356.263 304.054H362.664V310.456H356.263V304.054ZM362.664 313.656H356.263V320.057H362.664V313.656ZM346.662 294.453H353.063V300.854H346.662V294.453ZM353.063 304.054H346.662V310.456H353.063V304.054ZM346.662 313.656H353.063V320.057H346.662V313.656Z\",\"fill\":\"white\",\"key\":137}),React.createElement(\"path\",{\"d\":\"M300.32 353.167L297.341 355.103C296.164 355.869 295.453 357.178 295.453 358.582C295.453 360.874 297.311 362.732 299.602 362.732H529.041C531.133 362.732 532.829 361.036 532.829 358.944C532.829 357.648 532.167 356.443 531.075 355.748L527.732 353.621C523.762 351.094 518.624 351.372 514.949 354.312L514.555 354.627C510.52 357.855 504.846 358.056 500.592 355.122L499.801 354.577C495.293 351.468 489.319 351.517 484.862 354.7L484.699 354.817C480.29 357.966 474.38 358.015 469.92 354.939L468.622 354.044C464.638 351.296 459.312 351.539 455.594 354.637C451.771 357.822 446.266 357.98 442.268 355.018L441.107 354.158C437.37 351.39 432.199 351.65 428.759 354.777C425.365 357.862 420.279 358.162 416.547 355.496L414.955 354.359C410.844 351.423 405.283 351.575 401.339 354.73C397.394 357.886 391.833 358.038 387.722 355.101L386.58 354.285C382.514 351.381 377.028 351.479 373.067 354.525L372.268 355.14C368.526 358.018 363.287 357.916 359.66 354.893L359.173 354.487C355.651 351.553 350.521 351.607 347.062 354.614L346.842 354.806C343.393 357.805 338.246 357.748 334.865 354.674C331.537 351.648 326.487 351.539 323.032 354.419L322.246 355.074C318.877 357.881 313.908 357.592 310.887 354.412C308.125 351.505 303.683 350.981 300.32 353.167Z\",\"fill\":\"#525937\",\"key\":138}),React.createElement(\"path\",{\"d\":\"M295.453 362.198L300.32 359.034C303.683 356.849 308.125 357.373 310.887 360.28V360.28C313.908 363.459 318.877 363.749 322.246 360.941L323.032 360.287C326.487 357.407 331.537 357.516 334.865 360.541V360.541C338.246 363.616 343.393 363.672 346.842 360.674L347.062 360.482C350.521 357.474 355.651 357.42 359.173 360.355L359.66 360.761C363.287 363.784 368.526 363.886 372.268 361.007L373.067 360.393C377.028 357.346 382.514 357.249 386.58 360.153L387.722 360.969C391.833 363.905 397.394 363.754 401.339 360.598V360.598C405.283 357.442 410.844 357.291 414.955 360.227L416.547 361.364C420.279 364.029 425.365 363.73 428.759 360.645V360.645C432.199 357.517 437.37 357.258 441.107 360.026L442.268 360.886C446.266 363.847 451.771 363.69 455.594 360.505V360.505C459.312 357.406 464.638 357.164 468.622 359.912L469.92 360.806C474.38 363.883 480.29 363.834 484.699 360.685L484.862 360.568C489.319 357.385 495.293 357.335 499.801 360.445L500.592 360.99C504.846 363.924 510.52 363.722 514.555 360.494V360.494C518.466 357.366 523.933 357.07 528.158 359.759L532.829 362.732\",\"stroke\":\"#848B69\",\"strokeWidth\":\"1.06686\",\"key\":139}),React.createElement(\"path\",{\"d\":\"M322.124 368.599L326.991 365.435C330.354 363.25 334.796 363.774 337.558 366.681V366.681C340.579 369.86 345.548 370.15 348.917 367.342L349.703 366.687C353.158 363.808 358.207 363.917 361.536 366.942V366.942C364.917 370.016 370.064 370.073 373.513 367.075L373.733 366.883C377.192 363.875 382.322 363.821 385.844 366.756L386.331 367.162C389.958 370.185 395.197 370.287 398.939 367.408L399.738 366.793C403.698 363.747 409.185 363.65 413.251 366.554L414.393 367.37C418.504 370.306 424.065 370.155 428.01 366.999V366.999C431.954 363.843 437.515 363.692 441.626 366.628L443.218 367.765C446.95 370.43 452.036 370.131 455.429 367.046V367.046C458.87 363.918 464.041 363.659 467.777 366.426L468.939 367.287C472.937 370.248 478.442 370.091 482.264 366.906V366.906C485.983 363.807 491.309 363.565 495.293 366.313L496.591 367.207C501.051 370.283 506.961 370.235 511.37 367.085L511.533 366.969C515.99 363.786 521.963 363.736 526.472 366.846L527.263 367.391C531.517 370.325 537.191 370.123 541.226 366.895V366.895C545.137 363.767 550.604 363.471 554.828 366.16L559.5 369.133\",\"stroke\":\"#848B69\",\"strokeWidth\":\"1.06686\",\"key\":140}),React.createElement(\"path\",{\"d\":\"M5.42335 8V1.79283H9.14523V2.45961H6.175V4.55696H8.86639V5.22375H6.175V8H5.42335ZM9.91203 8H9.12401L11.4032 1.79283H12.1791L14.4583 8H13.6703L11.8154 2.77482H11.7669L9.91203 8ZM10.203 5.57532H13.3793V6.24211H10.203V5.57532ZM15.4251 8V1.79283H17.5225C18.0074 1.79283 18.4055 1.87567 18.7166 2.04136C19.0278 2.20502 19.2582 2.43032 19.4077 2.71724C19.5572 3.00416 19.632 3.33048 19.632 3.6962C19.632 4.06192 19.5572 4.38622 19.4077 4.6691C19.2582 4.95198 19.0288 5.17424 18.7197 5.33589C18.4105 5.49551 18.0155 5.57532 17.5346 5.57532H15.8373V4.89641H17.5104C17.8417 4.89641 18.1084 4.84792 18.3105 4.75093C18.5146 4.65395 18.6621 4.51655 18.753 4.33874C18.846 4.15891 18.8924 3.94473 18.8924 3.6962C18.8924 3.44767 18.846 3.23046 18.753 3.04457C18.6601 2.85868 18.5116 2.71522 18.3075 2.61419C18.1034 2.51114 17.8337 2.45961 17.4982 2.45961H16.1768V8H15.4251ZM18.3469 5.21162L19.8744 8H19.0015L17.4982 5.21162H18.3469ZM20.8845 1.79283H21.7816L23.891 6.94527H23.9638L26.0733 1.79283H26.9704V8H26.2672V3.284H26.2066L24.2669 8H23.588L21.6482 3.284H21.5876V8H20.8845V1.79283ZM28.4775 8V1.79283H32.2236V2.45961H29.2291V4.55696H32.0296V5.22375H29.2291V7.33321H32.2721V8H28.4775ZM33.5784 8V1.79283H35.6757C36.1607 1.79283 36.5587 1.87567 36.8699 2.04136C37.1811 2.20502 37.4114 2.43032 37.5609 2.71724C37.7104 3.00416 37.7852 3.33048 37.7852 3.6962C37.7852 4.06192 37.7104 4.38622 37.5609 4.6691C37.4114 4.95198 37.1821 5.17424 36.8729 5.33589C36.5638 5.49551 36.1688 5.57532 35.6879 5.57532H33.9906V4.89641H35.6636C35.995 4.89641 36.2617 4.84792 36.4638 4.75093C36.6678 4.65395 36.8153 4.51655 36.9063 4.33874C36.9992 4.15891 37.0457 3.94473 37.0457 3.6962C37.0457 3.44767 36.9992 3.23046 36.9063 3.04457C36.8133 2.85868 36.6648 2.71522 36.4607 2.61419C36.2566 2.51114 35.9869 2.45961 35.6515 2.45961H34.33V8H33.5784ZM36.5001 5.21162L38.0277 8H37.1548L35.6515 5.21162H36.5001ZM42.4322 3.34462C42.3959 3.0375 42.2484 2.79907 41.9897 2.62934C41.7311 2.45961 41.4139 2.37475 41.0381 2.37475C40.7633 2.37475 40.5228 2.4192 40.3167 2.50811C40.1126 2.59701 39.953 2.71926 39.8378 2.87484C39.7247 3.03042 39.6681 3.20722 39.6681 3.40524C39.6681 3.57092 39.7075 3.71337 39.7863 3.83259C39.8671 3.94978 39.9702 4.04778 40.0955 4.12658C40.2207 4.20336 40.3521 4.26701 40.4895 4.31752C40.6269 4.36602 40.7532 4.40542 40.8683 4.43573L41.4987 4.60545C41.6604 4.64788 41.8402 4.70648 42.0382 4.78124C42.2383 4.856 42.4292 4.95804 42.6111 5.08736C42.7949 5.21465 42.9465 5.37832 43.0657 5.57835C43.1849 5.77839 43.2445 6.02389 43.2445 6.31485C43.2445 6.65026 43.1566 6.95335 42.9808 7.2241C42.8071 7.49486 42.5525 7.71005 42.2171 7.86967C41.8837 8.0293 41.4785 8.10911 41.0017 8.10911C40.5572 8.10911 40.1722 8.03738 39.8469 7.89392C39.5236 7.75046 39.2691 7.55042 39.0832 7.29381C38.8993 7.0372 38.7952 6.73917 38.771 6.39971H39.5469C39.5671 6.6341 39.6459 6.82807 39.7833 6.98164C39.9227 7.13318 40.0985 7.24633 40.3107 7.32109C40.5248 7.39383 40.7552 7.4302 41.0017 7.4302C41.2886 7.4302 41.5462 7.38373 41.7746 7.29078C42.0029 7.19582 42.1837 7.06448 42.3171 6.89677C42.4504 6.72704 42.5171 6.52903 42.5171 6.30273C42.5171 6.09663 42.4595 5.92892 42.3444 5.79961C42.2292 5.67029 42.0776 5.56522 41.8897 5.4844C41.7018 5.40358 41.4987 5.33286 41.2805 5.27224L40.5168 5.05402C40.0318 4.9146 39.6479 4.71557 39.365 4.45694C39.0822 4.19831 38.9407 3.85986 38.9407 3.44161C38.9407 3.09407 39.0347 2.79099 39.2226 2.53235C39.4125 2.2717 39.6671 2.06964 39.9864 1.92618C40.3076 1.7807 40.6663 1.70796 41.0623 1.70796C41.4624 1.70796 41.818 1.77969 42.1292 1.92315C42.4403 2.06459 42.6868 2.25857 42.8687 2.50508C43.0526 2.75159 43.1496 3.03143 43.1597 3.34462H42.4322Z\",\"fill\":\"#DDE8B1\",\"key\":141}),React.createElement(\"path\",{\"d\":\"M23.4033 75.2134V18.6699\",\"stroke\":\"white\",\"strokeWidth\":\"1.06686\",\"key\":142}),React.createElement(\"circle\",{\"cx\":\"23.4037\",\"cy\":\"17.0697\",\"r\":\"3.20057\",\"fill\":\"white\",\"key\":143}),React.createElement(\"path\",{\"d\":\"M237.168 277.915V271.708H240.914V272.375H237.92V274.472H240.72V275.139H237.92V277.248H240.963V277.915H237.168ZM242.633 271.708L244.233 274.29H244.282L245.882 271.708H246.767L244.815 274.811L246.767 277.915H245.882L244.282 275.381H244.233L242.633 277.915H241.748L243.748 274.811L241.748 271.708H242.633ZM247.745 277.915V271.708H249.843C250.33 271.708 250.728 271.796 251.037 271.972C251.348 272.145 251.578 272.381 251.728 272.678C251.877 272.975 251.952 273.306 251.952 273.672C251.952 274.038 251.877 274.37 251.728 274.669C251.58 274.968 251.352 275.206 251.043 275.384C250.734 275.56 250.338 275.648 249.855 275.648H248.351V274.981H249.83C250.164 274.981 250.432 274.924 250.634 274.808C250.836 274.693 250.982 274.538 251.073 274.342C251.166 274.144 251.213 273.92 251.213 273.672C251.213 273.423 251.166 273.201 251.073 273.005C250.982 272.809 250.835 272.656 250.631 272.544C250.427 272.431 250.156 272.375 249.818 272.375H248.497V277.915H247.745ZM258.4 274.811C258.4 275.466 258.282 276.032 258.046 276.509C257.809 276.986 257.485 277.353 257.073 277.612C256.66 277.871 256.19 278 255.66 278C255.131 278 254.66 277.871 254.248 277.612C253.836 277.353 253.511 276.986 253.275 276.509C253.039 276.032 252.92 275.466 252.92 274.811C252.92 274.157 253.039 273.591 253.275 273.114C253.511 272.637 253.836 272.27 254.248 272.011C254.66 271.752 255.131 271.623 255.66 271.623C256.19 271.623 256.66 271.752 257.073 272.011C257.485 272.27 257.809 272.637 258.046 273.114C258.282 273.591 258.4 274.157 258.4 274.811ZM257.673 274.811C257.673 274.274 257.583 273.82 257.403 273.451C257.225 273.081 256.984 272.801 256.679 272.611C256.376 272.421 256.036 272.326 255.66 272.326C255.284 272.326 254.944 272.421 254.639 272.611C254.336 272.801 254.094 273.081 253.915 273.451C253.737 273.82 253.648 274.274 253.648 274.811C253.648 275.349 253.737 275.803 253.915 276.172C254.094 276.542 254.336 276.822 254.639 277.012C254.944 277.202 255.284 277.297 255.66 277.297C256.036 277.297 256.376 277.202 256.679 277.012C256.984 276.822 257.225 276.542 257.403 276.172C257.583 275.803 257.673 275.349 257.673 274.811ZM259.664 277.915V271.708H261.761C262.246 271.708 262.644 271.791 262.956 271.956C263.267 272.12 263.497 272.345 263.647 272.632C263.796 272.919 263.871 273.246 263.871 273.611C263.871 273.977 263.796 274.301 263.647 274.584C263.497 274.867 263.268 275.089 262.959 275.251C262.649 275.411 262.254 275.49 261.774 275.49H260.076V274.811H261.749C262.081 274.811 262.347 274.763 262.549 274.666C262.753 274.569 262.901 274.432 262.992 274.254C263.085 274.074 263.131 273.86 263.131 273.611C263.131 273.363 263.085 273.145 262.992 272.96C262.899 272.774 262.75 272.63 262.546 272.529C262.342 272.426 262.073 272.375 261.737 272.375H260.416V277.915H259.664ZM262.586 275.127L264.113 277.915H263.24L261.737 275.127H262.586ZM264.784 272.375V271.708H269.439V272.375H267.487V277.915H266.736V272.375H264.784ZM273.994 273.26C273.958 272.953 273.81 272.714 273.551 272.544C273.293 272.375 272.976 272.29 272.6 272.29C272.325 272.29 272.084 272.334 271.878 272.423C271.674 272.512 271.515 272.634 271.399 272.79C271.286 272.945 271.23 273.122 271.23 273.32C271.23 273.486 271.269 273.628 271.348 273.748C271.429 273.865 271.532 273.963 271.657 274.042C271.782 274.118 271.914 274.182 272.051 274.233C272.189 274.281 272.315 274.32 272.43 274.351L273.06 274.52C273.222 274.563 273.402 274.622 273.6 274.696C273.8 274.771 273.991 274.873 274.173 275.002C274.357 275.13 274.508 275.293 274.627 275.493C274.747 275.693 274.806 275.939 274.806 276.23C274.806 276.565 274.718 276.868 274.542 277.139C274.369 277.41 274.114 277.625 273.779 277.785C273.445 277.944 273.04 278.024 272.563 278.024C272.119 278.024 271.734 277.952 271.409 277.809C271.085 277.665 270.831 277.465 270.645 277.209C270.461 276.952 270.357 276.654 270.333 276.315H271.109C271.129 276.549 271.208 276.743 271.345 276.897C271.484 277.048 271.66 277.161 271.872 277.236C272.086 277.309 272.317 277.345 272.563 277.345C272.85 277.345 273.108 277.299 273.336 277.206C273.565 277.111 273.745 276.98 273.879 276.812C274.012 276.642 274.079 276.444 274.079 276.218C274.079 276.012 274.021 275.844 273.906 275.715C273.791 275.585 273.639 275.48 273.451 275.399C273.263 275.319 273.06 275.248 272.842 275.187L272.078 274.969C271.593 274.83 271.21 274.631 270.927 274.372C270.644 274.113 270.502 273.775 270.502 273.357C270.502 273.009 270.596 272.706 270.784 272.447C270.974 272.187 271.229 271.985 271.548 271.841C271.869 271.696 272.228 271.623 272.624 271.623C273.024 271.623 273.38 271.695 273.691 271.838C274.002 271.98 274.248 272.174 274.43 272.42C274.614 272.667 274.711 272.946 274.721 273.26H273.994ZM278.103 272.375V271.708H282.758V272.375H280.806V277.915H280.055V272.375H278.103ZM288.897 274.811C288.897 275.466 288.779 276.032 288.543 276.509C288.306 276.986 287.982 277.353 287.57 277.612C287.158 277.871 286.687 278 286.157 278C285.628 278 285.157 277.871 284.745 277.612C284.333 277.353 284.009 276.986 283.772 276.509C283.536 276.032 283.418 275.466 283.418 274.811C283.418 274.157 283.536 273.591 283.772 273.114C284.009 272.637 284.333 272.27 284.745 272.011C285.157 271.752 285.628 271.623 286.157 271.623C286.687 271.623 287.158 271.752 287.57 272.011C287.982 272.27 288.306 272.637 288.543 273.114C288.779 273.591 288.897 274.157 288.897 274.811ZM288.17 274.811C288.17 274.274 288.08 273.82 287.9 273.451C287.722 273.081 287.481 272.801 287.176 272.611C286.873 272.421 286.533 272.326 286.157 272.326C285.782 272.326 285.441 272.421 285.136 272.611C284.833 272.801 284.591 273.081 284.412 273.451C284.234 273.82 284.145 274.274 284.145 274.811C284.145 275.349 284.234 275.803 284.412 276.172C284.591 276.542 284.833 276.822 285.136 277.012C285.441 277.202 285.782 277.297 286.157 277.297C286.533 277.297 286.873 277.202 287.176 277.012C287.481 276.822 287.722 276.542 287.9 276.172C288.08 275.803 288.17 275.349 288.17 274.811ZM243.19 280.708H244.087L246.197 285.86H246.27L248.379 280.708H249.276V286.915H248.573V282.199H248.512L246.573 286.915H245.894L243.954 282.199H243.893V286.915H243.19V280.708ZM254.857 280.708H255.608V284.818C255.608 285.242 255.508 285.621 255.308 285.954C255.11 286.286 254.83 286.547 254.469 286.739C254.107 286.929 253.683 287.024 253.196 287.024C252.709 287.024 252.285 286.929 251.923 286.739C251.561 286.547 251.28 286.286 251.08 285.954C250.882 285.621 250.783 285.242 250.783 284.818V280.708H251.535V284.757C251.535 285.06 251.602 285.33 251.735 285.566C251.868 285.801 252.058 285.986 252.305 286.121C252.553 286.254 252.85 286.321 253.196 286.321C253.541 286.321 253.838 286.254 254.087 286.121C254.335 285.986 254.525 285.801 254.657 285.566C254.79 285.33 254.857 285.06 254.857 284.757V280.708ZM257.109 286.915V280.708H257.861V286.248H260.746V286.915H257.109ZM260.746 281.375V280.708H265.401V281.375H263.449V286.915H262.698V281.375H260.746ZM267.313 280.708V286.915H266.561V280.708H267.313ZM268.82 286.915V280.708H270.917C271.404 280.708 271.802 280.796 272.111 280.972C272.423 281.145 272.653 281.381 272.802 281.678C272.952 281.975 273.027 282.306 273.027 282.672C273.027 283.038 272.952 283.37 272.802 283.669C272.655 283.968 272.427 284.206 272.117 284.384C271.808 284.56 271.412 284.648 270.929 284.648H269.426V283.981H270.905C271.238 283.981 271.506 283.924 271.708 283.808C271.91 283.693 272.057 283.538 272.148 283.342C272.241 283.144 272.287 282.92 272.287 282.672C272.287 282.423 272.241 282.201 272.148 282.005C272.057 281.809 271.909 281.656 271.705 281.544C271.501 281.431 271.23 281.375 270.893 281.375H269.571V286.915H268.82ZM274.237 286.915V280.708H274.989V286.248H277.875V286.915H274.237ZM279.038 286.915V280.708H282.784V281.375H279.79V283.472H282.59V284.139H279.79V286.248H282.833V286.915H279.038ZM244.059 291.648H243.308C243.263 291.431 243.185 291.241 243.074 291.078C242.965 290.914 242.832 290.777 242.674 290.666C242.519 290.552 242.346 290.468 242.156 290.411C241.966 290.354 241.768 290.326 241.562 290.326C241.186 290.326 240.846 290.421 240.541 290.611C240.237 290.801 239.996 291.081 239.816 291.451C239.638 291.82 239.549 292.274 239.549 292.811C239.549 293.349 239.638 293.803 239.816 294.172C239.996 294.542 240.237 294.822 240.541 295.012C240.846 295.202 241.186 295.297 241.562 295.297C241.768 295.297 241.966 295.268 242.156 295.212C242.346 295.155 242.519 295.071 242.674 294.96C242.832 294.847 242.965 294.709 243.074 294.545C243.185 294.379 243.263 294.189 243.308 293.975H244.059C244.003 294.293 243.9 294.576 243.75 294.827C243.601 295.078 243.415 295.291 243.193 295.466C242.97 295.64 242.721 295.773 242.444 295.864C242.169 295.954 241.875 296 241.562 296C241.033 296 240.562 295.871 240.15 295.612C239.737 295.353 239.413 294.986 239.177 294.509C238.94 294.032 238.822 293.466 238.822 292.811C238.822 292.157 238.94 291.591 239.177 291.114C239.413 290.637 239.737 290.27 240.15 290.011C240.562 289.752 241.033 289.623 241.562 289.623C241.875 289.623 242.169 289.668 242.444 289.759C242.721 289.85 242.97 289.984 243.193 290.159C243.415 290.333 243.601 290.545 243.75 290.796C243.9 291.044 244.003 291.328 244.059 291.648ZM250.511 292.811C250.511 293.466 250.393 294.032 250.157 294.509C249.92 294.986 249.596 295.353 249.184 295.612C248.772 295.871 248.301 296 247.771 296C247.242 296 246.771 295.871 246.359 295.612C245.947 295.353 245.623 294.986 245.386 294.509C245.15 294.032 245.031 293.466 245.031 292.811C245.031 292.157 245.15 291.591 245.386 291.114C245.623 290.637 245.947 290.27 246.359 290.011C246.771 289.752 247.242 289.623 247.771 289.623C248.301 289.623 248.772 289.752 249.184 290.011C249.596 290.27 249.92 290.637 250.157 291.114C250.393 291.591 250.511 292.157 250.511 292.811ZM249.784 292.811C249.784 292.274 249.694 291.82 249.514 291.451C249.336 291.081 249.095 290.801 248.79 290.611C248.487 290.421 248.147 290.326 247.771 290.326C247.396 290.326 247.055 290.421 246.75 290.611C246.447 290.801 246.205 291.081 246.026 291.451C245.848 291.82 245.759 292.274 245.759 292.811C245.759 293.349 245.848 293.803 246.026 294.172C246.205 294.542 246.447 294.822 246.75 295.012C247.055 295.202 247.396 295.297 247.771 295.297C248.147 295.297 248.487 295.202 248.79 295.012C249.095 294.822 249.336 294.542 249.514 294.172C249.694 293.803 249.784 293.349 249.784 292.811ZM255.849 289.708H256.6V293.818C256.6 294.242 256.5 294.621 256.3 294.954C256.102 295.286 255.822 295.547 255.461 295.739C255.099 295.929 254.675 296.024 254.188 296.024C253.701 296.024 253.276 295.929 252.915 295.739C252.553 295.547 252.272 295.286 252.072 294.954C251.874 294.621 251.775 294.242 251.775 293.818V289.708H252.527V293.757C252.527 294.06 252.593 294.33 252.727 294.566C252.86 294.801 253.05 294.986 253.297 295.121C253.545 295.254 253.842 295.321 254.188 295.321C254.533 295.321 254.83 295.254 255.079 295.121C255.327 294.986 255.517 294.801 255.649 294.566C255.782 294.33 255.849 294.06 255.849 293.757V289.708ZM263.023 289.708V295.915H262.296L258.914 291.041H258.853V295.915H258.101V289.708H258.829L262.223 294.594H262.284V289.708H263.023ZM264.188 290.375V289.708H268.843V290.375H266.891V295.915H266.14V290.375H264.188ZM270.003 295.915V289.708H272.101C272.586 289.708 272.984 289.791 273.295 289.956C273.606 290.12 273.836 290.345 273.986 290.632C274.135 290.919 274.21 291.246 274.21 291.611C274.21 291.977 274.135 292.301 273.986 292.584C273.836 292.867 273.607 293.089 273.298 293.251C272.989 293.411 272.594 293.49 272.113 293.49H270.416V292.811H272.089C272.42 292.811 272.687 292.763 272.889 292.666C273.093 292.569 273.24 292.432 273.331 292.254C273.424 292.074 273.471 291.86 273.471 291.611C273.471 291.363 273.424 291.145 273.331 290.96C273.238 290.774 273.09 290.63 272.886 290.529C272.682 290.426 272.412 290.375 272.076 290.375H270.755V295.915H270.003ZM272.925 293.127L274.453 295.915H273.58L272.076 293.127H272.925ZM276.214 289.708V295.915H275.463V289.708H276.214ZM277.721 295.915V289.708H281.468V290.375H278.473V292.472H281.274V293.139H278.473V295.248H281.516V295.915H277.721ZM286.217 291.26C286.181 290.953 286.033 290.714 285.774 290.544C285.516 290.375 285.199 290.29 284.823 290.29C284.548 290.29 284.307 290.334 284.101 290.423C283.897 290.512 283.738 290.634 283.622 290.79C283.509 290.945 283.453 291.122 283.453 291.32C283.453 291.486 283.492 291.628 283.571 291.748C283.652 291.865 283.755 291.963 283.88 292.042C284.005 292.118 284.137 292.182 284.274 292.233C284.412 292.281 284.538 292.32 284.653 292.351L285.283 292.52C285.445 292.563 285.625 292.622 285.823 292.696C286.023 292.771 286.214 292.873 286.396 293.002C286.58 293.13 286.731 293.293 286.85 293.493C286.97 293.693 287.029 293.939 287.029 294.23C287.029 294.565 286.941 294.868 286.765 295.139C286.592 295.41 286.337 295.625 286.002 295.785C285.668 295.944 285.263 296.024 284.786 296.024C284.342 296.024 283.957 295.952 283.632 295.809C283.308 295.665 283.054 295.465 282.868 295.209C282.684 294.952 282.58 294.654 282.556 294.315H283.332C283.352 294.549 283.431 294.743 283.568 294.897C283.707 295.048 283.883 295.161 284.095 295.236C284.309 295.309 284.54 295.345 284.786 295.345C285.073 295.345 285.331 295.299 285.559 295.206C285.788 295.111 285.968 294.98 286.102 294.812C286.235 294.642 286.302 294.444 286.302 294.218C286.302 294.012 286.244 293.844 286.129 293.715C286.014 293.585 285.862 293.48 285.674 293.399C285.486 293.319 285.283 293.248 285.065 293.187L284.301 292.969C283.816 292.83 283.433 292.631 283.15 292.372C282.867 292.113 282.725 291.775 282.725 291.357C282.725 291.009 282.819 290.706 283.007 290.447C283.197 290.187 283.452 289.985 283.771 289.841C284.092 289.696 284.451 289.623 284.847 289.623C285.247 289.623 285.603 289.695 285.914 289.838C286.225 289.98 286.471 290.174 286.653 290.42C286.837 290.667 286.934 290.946 286.944 291.26H286.217Z\",\"fill\":\"#DDE8B1\",\"key\":144}),React.createElement(\"path\",{\"d\":\"M262.38 362.198V305.655\",\"stroke\":\"white\",\"strokeWidth\":\"1.06686\",\"key\":145}),React.createElement(\"circle\",{\"cx\":\"262.379\",\"cy\":\"304.055\",\"r\":\"3.20057\",\"fill\":\"white\",\"key\":146}),React.createElement(\"circle\",{\"id\":\"story-point\",\"cx\":\"2.5\",\"cy\":\"2.5\",\"r\":\"3.5\",\"transform\":\"matrix(-1 0 0 1 26 73)\",\"fill\":\"#37A980\",\"stroke\":\"#EEEED7\",\"strokeWidth\":\"2\",\"strokeLinejoin\":\"round\",\"key\":147})]);\n}\n\nIllustration.defaultProps = {\"width\":\"100%\",\"height\":\"373\",\"viewBox\":\"0 0 560 373\",\"fill\":\"none\"};\n\nmodule.exports = Illustration;\n\nIllustration.default = Illustration;\n"],"names":["_svgPathExp","_numbersExp","_scientific","_selectorExp","_DEG2RAD","Math","PI","_RAD2DEG","_sin","sin","_cos","cos","_abs","abs","_sqrt","sqrt","_atan2","atan2","_largeNum","_isString","value","_isNumber","_temp","_temp2","_roundingNum","_wrapProgress","progress","round","_round","_roundPrecise","_splitSegment","rawPath","segIndex","i","t","segment","shift","subdivideSegment","length","splice","slice","_getSampleIndex","samples","l","_copyMetaData","source","copy","totalLength","lookup","minLength","resolution","totalPoints","_appendOrMerge","index","prevSeg","concat","getRawPath","e","test","document","querySelector","getAttribute","_gsPath","_dirty","stringToRawPath","console","warn","reverseSegment","y","reverse","reversed","_typeAttrs","rect","circle","ellipse","line","element","swap","data","x","r","ry","path","rcirc","rycirc","points","w","h","x2","x3","x4","x5","x6","y2","y3","y4","y5","y6","attr","type","tagName","toLowerCase","circ","getBBox","ignore","name","createElementNS","call","attributes","nodeName","indexOf","setAttributeNS","nodeValue","_createPath","attrs","props","split","obj","_attrToObj","rx","width","height","join","cx","cy","x1","y1","match","setAttribute","rawPathToString","_gsRawPath","parentNode","insertBefore","removeChild","getRotationAtBezierT","a","b","c","sliceRawPath","start","end","loops","max","copyRawPath","skipOuter","_reverseRawPath","offset","min","cacheRawPathMeasurements","wrapsBehind","sShift","eShift","totalSegments","j","wrap","s","getProgressData","eSeg","sSeg","eSegIndex","sSegIndex","ei","si","sameSegment","sameBezier","angle","push","measureSegment","startIndex","bezierQty","xd","xd1","yd","yd1","inv","lengthIndex","segLength","inc","endIndex","samplesIndex","prevLength","pathLength","ax","ay","cp1x","cp1y","cp2x","cp2y","x1a","y1a","x2a","y2a","decoratee","pushToNextIfAtEnd","getPositionOnPath","includeAngle","point","result","transformRawPath","d","tx","ty","arcToSegment","lastX","lastY","largeArcFlag","sweepFlag","angleRad","cosAngle","sinAngle","TWOPI","dx2","dy2","x1_sq","y1_sq","radiiCheck","rx_sq","ry_sq","sq","coef","cx1","cy1","ux","uy","vx","vy","temp","angleStart","acos","angleExtent","isNaN","segments","ceil","angleIncrement","controlLength","ma","mb","mc","md","command","isRelative","startX","startY","difX","difY","beziers","prevCommand","flag1","flag2","replace","m","n","relativeX","relativeY","twoThirds","elements","errorMessage","sx","sy","ex","ey","log","toUpperCase","closed","substr","charAt","pop","flatPointsToSegment","curviness","pointsToSegment","prevX","prevY","dx1","dy1","r1","r2","tl","mx1","mx2","mxm","my1","my2","mym","nextX","nextY","unshift","pow","sl","_doc","_win","_docElement","_body","_divContainer","_svgContainer","_identityMatrix","_gEl","_hasOffsetBug","_transformProp","_transformOriginProp","_setDoc","doc","ownerDocument","style","window","Matrix2D","documentElement","body","transform","d1","createElement","d2","appendChild","position","offsetParent","_svgTemps","_divTemps","_svgOwner","ownerSVGElement","_isFixed","getComputedStyle","nodeType","_createSibling","svg","ns","css","cssText","_placeSiblings","adjustGOffset","container","cs","isRootSVG","siblings","parent","getCTM","removeProperty","clone","_getCTM","f","baseVal","numberOfItems","multiply","getItem","matrix","_consolidate","offsetLeft","offsetTop","scrollLeft","scrollTop","top","left","_setMatrix","this","_proto","prototype","inverse","determinant","a2","b2","c2","e2","f2","equals","apply","getGlobalMatrix","includeScrollInFixed","zeroScales","cache","_gsap","uncache","get","scaleX","scaleY","renderTransform","_forceNonZeroScale","temps","b1","getBoundingClientRect","b3","isFixed","pageXOffset","pageYOffset","PropTween","_getUnit","_toArray","_getStyleSaver","_reverting","_xProps","_yProps","_populateSegmentFromArray","values","property","mode","parseFloat","_getPropNum","target","prop","unit","_relativize","_segmentToRawPath","plugin","slicer","vars","unitX","unitY","fromCurrent","relative","_align","_addDimensionalPropTween","_emptyFunc","v","_numExp","_originToPoint","origin","parentMatrix","viewBox","offsetWidth","offsetHeight","_getAlignMatrix","fromElement","toElement","fromOrigin","toOrigin","p","fromPoint","_originToPoint2","getTotalLength","_ref","alignTarget","align","offsetX","offsetY","alignOrigin","curX","curY","set","transformOrigin","pathProperty","forceUnit","harness","alias","aliases","pt","_pt","u","pp","_props","MotionPathPlugin","version","register","core","Plugin","propTween","utils","getUnit","toArray","getStyleSaver","reverting","init","tween","rawPaths","_vars","autoRotate","firstObj","styles","rotate","rOffset","radians","useRadians","rProp","rotation","rSet","ru","Array","isArray","render","ratio","_time","_next","revert","getLength","convertToPath","targets","map","convertCoordinates","getAlignMatrix","getRelativePosition","arrayToRawPath","gsap","registerPlugin","useStyles","createStyles","theme","pageTitle","FONTS","fontSize","fn","smallerThan","BREAKPOINT","pageDescription","marginTop","lineHeight","whatwedoContainer","display","minHeight","alignItems","flexDirection","justifyContent","padding","whatwedoContentContainer","flex","maxWidth","textAlign","whatwedoContainerRoot","classes","useEffect","ScrollTrigger","duration","motionPath","scrollTrigger","trigger","scrub","pin","ease","storyPoint","getElementById","repeat","to","scale","className","backgroundColor","COLORS","id","Container","size","color","IndexContent","React","Illustration","defaultProps","module","exports","default"],"sourceRoot":""}